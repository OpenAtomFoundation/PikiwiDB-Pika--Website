"use strict";(self.webpackChunkPikiwiDB_Pika_=self.webpackChunkPikiwiDB_Pika_||[]).push([[2995],{2336:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>a,contentTitle:()=>d,default:()=>p,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var s=r(4848),i=r(8453);const t={title:"Pika \u7ebf\u7a0b\u6a21\u578b\u7b80\u4ecb",sidebar_position:0},d=void 0,o={id:"\u8bbe\u8ba1\u4e0e\u5b9e\u73b0/Pika \u4f20\u706b\u8ba1\u5212/\u7ebf\u7a0b\u6a21\u578b/index",title:"Pika \u7ebf\u7a0b\u6a21\u578b\u7b80\u4ecb",description:"alt text",source:"@site/docs/\u8bbe\u8ba1\u4e0e\u5b9e\u73b0/Pika \u4f20\u706b\u8ba1\u5212/\u7ebf\u7a0b\u6a21\u578b/index.md",sourceDirName:"\u8bbe\u8ba1\u4e0e\u5b9e\u73b0/Pika \u4f20\u706b\u8ba1\u5212/\u7ebf\u7a0b\u6a21\u578b",slug:"/\u8bbe\u8ba1\u4e0e\u5b9e\u73b0/Pika \u4f20\u706b\u8ba1\u5212/\u7ebf\u7a0b\u6a21\u578b/",permalink:"/docs/\u8bbe\u8ba1\u4e0e\u5b9e\u73b0/Pika \u4f20\u706b\u8ba1\u5212/\u7ebf\u7a0b\u6a21\u578b/",draft:!1,unlisted:!1,editUrl:"https://github.com/pikiwidb/website/tree/main/docs/\u8bbe\u8ba1\u4e0e\u5b9e\u73b0/Pika \u4f20\u706b\u8ba1\u5212/\u7ebf\u7a0b\u6a21\u578b/index.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Pika \u7ebf\u7a0b\u6a21\u578b\u7b80\u4ecb",sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Pika \u4f20\u706b\u8ba1\u5212",permalink:"/docs/\u8bbe\u8ba1\u4e0e\u5b9e\u73b0/Pika \u4f20\u706b\u8ba1\u5212/"},next:{title:"Pika \u8bfb\u5199\u6d41\u7a0b\u7b80\u4ecb",permalink:"/docs/\u8bbe\u8ba1\u4e0e\u5b9e\u73b0/Pika \u4f20\u706b\u8ba1\u5212/\u8bfb\u5199\u6d41\u7a0b/"}},a={},c=[{value:"Introduction",id:"introduction",level:2},{value:"\u7ebf\u7a0b\u6a21\u578b",id:"\u7ebf\u7a0b\u6a21\u578b",level:2},{value:"ServerThread",id:"serverthread",level:2},{value:"DispatchThread",id:"dispatchthread",level:3},{value:"Connection",id:"connection",level:3},{value:"Pika \u7ebf\u7a0b\u6a21\u578b\u4ee5\u53caCmd\u5904\u7406\u987a\u5e8f",id:"pika-\u7ebf\u7a0b\u6a21\u578b\u4ee5\u53cacmd\u5904\u7406\u987a\u5e8f",level:2},{value:"Reference",id:"reference",level:2}];function l(n){const e={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{alt:"alt text",src:r(2774).A+"",width:"572",height:"175"})}),"\n",(0,s.jsx)(e.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(e.p,{children:"Pika\u662fQihoo360 \u5f00\u6e90\u7684\u4e00\u6b3e\u517c\u5bb9redis\u534f\u8bae\u7684\u9ad8\u6027\u80fdkv\u5b58\u50a8\u670d\u52a1\uff0c\u5176\u4e0eredis\u6700\u5927\u7684\u4e0d\u7528\u70b9\u662f\u5176\u6570\u636e\u662f\u57fa\u4e8e\u78c1\u76d8\u800c\u4e0d\u662f\u57fa\u4e8e\u5185\u5b58\u3002\u540c\u65f6\u4f7f\u7528\u4e86\u591a\u7ebf\u7a0b\u7684\u65b9\u5f0f\u63d0\u9ad8\u4e86\u8bfb\u5199\u6548\u7387\u3002\u66f4\u591a\u7684\u6574\u4f53\u8bbe\u8ba1\u548c\u5b9e\u8df5\u7ec6\u8282\u53c2\u89c1Wiki\u7684\u8bbe\u8ba1\u5b9e\u73b0\u677f\u5757\u3002\u8fd9\u91cc\u662f\u66f4\u591a\u505a\u4ee3\u7801\u5c42\u9762\u5206\u6790\uff0c\u9002\u5408\u60f3\u8981\u4ece\u4e8bPika\u5f00\u53d1\u7684\u540c\u5b66\u3002"}),"\n",(0,s.jsx)(e.p,{children:"Pika\u4f7f\u7528\u4e86\u540c\u6837\u662fQihoo360 \u5f00\u6e90\u7684Pink \u7f51\u7edc\u5e93\uff0c\u5982\u679c\u8981\u4e86\u89e3pika\u7684\u4ee3\u7801\uff0c\u9996\u5148\u8981\u4e86\u89e3\u5176\u7f51\u7edc\u5e93\u7684\u7f51\u7edc\u6a21\u578b\uff0c\u548c\u8c03\u7528\u5173\u7cfb\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0bPink\u7684\u7f51\u7edc\u6a21\u578b\u3002"}),"\n",(0,s.jsx)(e.h2,{id:"\u7ebf\u7a0b\u6a21\u578b",children:"\u7ebf\u7a0b\u6a21\u578b"}),"\n",(0,s.jsx)(e.p,{children:"\u4e00\u5207\u4eceThread \u5f00\u59cb"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-c++",children:"class Thread {\n  int Thread::StartThread() {\n    return pthread_create(&thread_id_, nullptr, RunThread, (void *)this);\n  }\n  void* Thread::RunThread(void *arg) {\n    // thread \u7684\u6267\u884c\u51fd\u6570\n    thread->ThreadMain()\n  }\n  virtual void *ThreadMain() = 0;\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"Tread \u7c7b\u53ea\u662f\u5bf9pthread \u8c03\u7528\u8fdb\u884c\u4e86\u4e00\u5c42\u5c01\u88c5\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662fThreadMain \u662f\u5404\u7ebf\u7a0b\u7684\u5165\u53e3\u51fd\u6570\u3002"}),"\n",(0,s.jsx)(e.h2,{id:"serverthread",children:"ServerThread"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-c++",children:"class ServerThread : public Thread {\n  const ServerHandle *handle_;\n  \n  void ServerThread::DoCronTask();\n  void ServerThread::ProcessNotifyEvents(const PinkFiredEvent* pfe);\n  virtual void HandleConnEvent(PinkFiredEvent *pfe) = 0;\n  virtual void HandleNewConn(int connfd, const std::string& ip_port) = 0;\n  \n  void *ServerThread::ThreadMain() {\n    while (!should_stop()) {\n      DoCronTask();\n      // epoll_wait\n      nfds = pink_epoll_->PinkPoll(timeout);\n      for (int i = 0; i < nfds; i++) {\n        if (pfe->fd == pink_epoll_->notify_receive_fd()) {\n          ProcessNotifyEvents(pfe);\n          continue;\n        }\n        if (/*is listening fd*/) {\n          connfd = accept(fd, (struct sockaddr *) &cliaddr, &clilen);\n          handle_->AccessHandle(ip_port);\n          /*\n           * Handle new connection,\n           * implemented in derived class\n           */\n          HandleNewConn(connfd, ip_port);\n        } else {\n          /*\n           * Handle connection's event\n           * implemented in derived class\n           */\n          HandleConnEvent(pfe);\n        }\n      }\n    }\n  } \n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"ServerThread\u7c7b\u4e3b\u8981\u63d0\u4f9b\u4e00\u4e2aserver\u7684\u6846\u67b6\uff0c\u4e5f\u662f\u4e00\u4e2a\u865a\u7c7b\uff0c\u884d\u751f\u7c7b\u9700\u8981\u5b9e\u73b0HandleConnEvent HandleNewConn \u7b49\u51fd\u6570\u3002"}),"\n",(0,s.jsx)(e.p,{children:"1\uff0c\u5176\u4e2dServerHandle \u662f\u5404\u79cd\u4e8b\u4ef6\u53d1\u751f\u4e4b\u540e\u7684\u56de\u8c03\u51fd\u6570\uff0c\u8fd9\u4e2a\u7c7b\u7531\u4f7f\u7528\u8005\u5b9e\u73b0\u5e76\u4f20\u5165serverthread\uff0c\u5404\u7c7b\u4e8b\u4ef6\uff08\u4f8b\u5982\u94fe\u63a5\u5173\u95ed\uff09\u53d1\u751f\u65f6\uff0cserverthread \u4f1a\u8c03\u7528\u76f8\u5e94\u7684\u56de\u8c03\u51fd\u6570\u901a\u77e5serverthread \u7684\u4f7f\u7528\u8005\u3002ServerHandle\u5305\u542b\u7684\u51fd\u6570\u6709\u5904\u7406\u8fde\u63a5\u8d85\u65f6\u7684FdTimeoutHandle\uff0c\u5904\u7406\u8fde\u63a5\u88ab\u5173\u95ed\u7684FdClosedHandle \u7b49\u7b49\u3002"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-c++",children:"class ServerHandle {\n  virtual void FdTimeoutHandle(int fd, const std::string& ip_port) const {\n    UNUSED(fd);\n    UNUSED(ip_port);\n  }\n  virtual void FdClosedHandle(int fd, const std::string& ip_port) const {\n    UNUSED(fd);\n    UNUSED(ip_port);\n  }\n  ...\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"2\uff0cProcessNotifyEvents \u51fd\u6570\u4e3b\u8981\u662fserverthread\u5904\u7406\u5f02\u6b65\u901a\u4fe1\u7528\u7684\uff0c\u5176\u4ed6\u7ebf\u7a0b\u53ef\u4ee5\u901a\u8fc7\u5199\u5165PinkEpoll \u7684notify_send_fd\uff08\u5177\u4f53\u7684\u6d88\u606f\u5185\u5bb9\u5b58\u5230\u4e86notify_queue\u91cc\u9762\uff09\uff0c\u5728\u4e0b\u4e00\u6b21serverthread epoll \u5faa\u73af\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u901a\u8fc7notify_receive_fd\u8bfb\u5230\u6709\u6d88\u606f\u8981\u5904\u7406\uff0c\u4ecenotify_queue\u8bfb\u51fa\u6d88\u606f\uff0c\u5904\u7406\u5176\u4ed6\u7ebf\u7a0b\u7684\u4e8b\u4ef6\u3002"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-c++",children:"class PinkEpoll {\n  // fds is pipe\n  notify_receive_fd_ = fds[0];\n  notify_send_fd_ = fds[1];\n  std::queue<PinkItem> notify_queue_;\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"dispatchthread",children:"DispatchThread"}),"\n",(0,s.jsx)(e.p,{children:"DispatchThread\u7ef4\u62a4\u4e00\u7ec4worker thread\uff0cworker thread \u7528\u6765\u5904\u7406\u5ba2\u6237\u7aef\u8fde\u63a5\u7684\u8bfb\u5199\uff0cDispatchThread\u4e3b\u8981\u8d1f\u8d23accept \u5ba2\u6237\u7aefsocket\u8fde\u63a5\uff0c\u7136\u540e\u901a\u8fc7worker\u7ebf\u7a0b\u7684pink_epoll \u901a\u77e5worker\u7ebf\u7a0b\u3002DispatchThread\u7ee7\u627f\u4e8eServerThread\u53ea\u662f\u5b9e\u73b0\u4e86HandleNewConn \u7528\u4e8e\u5904\u7406\u65b0\u8fde\u63a5\u3002"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{alt:"alt text",src:r(8924).A+"",width:"630",height:"383"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-c++",children:"class DispatchThread : public ServerThread {\n  void DispatchThread::HandleNewConn() {\n    // schedule this conn to one of worker\n    PinkItem ti(connfd, ip_port, kNotiConnect);\n    std::queue<PinkItem> *q\n      = &(worker_thread_[next_thread]->pink_epoll()->notify_queue_);\n    q->push(ti);\n  }\n}\n\n// \u5176\u672c\u8d28\u662f\u4e00\u4e2a server \u7ebf\u7a0b\u7684\u7f29\u5199\u7248\u672c \u53ea\u5904\u7406conn \u7684\u8bfb\u5199\nclass WorkerThread : public Thread {\n  // pink_epoll \u4e3a\u4e86Dispatch \u7ebf\u7a0baccept \u4e4b\u540e\u53ef\u4ee5\u901a\u77e5\u7ed9worker\u7ebf\u7a0b\n  PinkEpoll *pink_epoll_;\n  void *WorkerThread::ThreadMain() {\n    while(!should_stop) {\n      nfds = pink_epoll_->PinkPoll(timeout);\n      for (int i = 0; i < nfds; i++) {\n        if (pfe->fd == pink_epoll_->notify_receive_fd()) {\n          if (ti.notify_type() == kNotiConnect) {\n            // \u5c06accept \u7684fd \u6536\u5165\u5230\u81ea\u5df1\u7684conn\u7ed3\u6784\u91cc\u9762\uff0c\u4e4b\u540e\u8d1f\u8d23\u8fd9\u4e2aconn\u7684\u8bfb\u5199\n            std::shared_ptr<PinkConn> tc = conn_factory_->NewPinkConn(\n              ti.fd(), ti.ip_port(),\n              server_thread_, private_data_, pink_epoll_);\n          } else if (ti.notify_type() == kNotiEpollout) {\n            pink_epoll_->PinkModEvent(ti.fd(), 0, EPOLLOUT);\n          } else if (....) {\n            ....\n          }\n        } else {\n          if ((pfe->mask & EPOLLOUT) && in_conn->is_reply()) {\n            WriteStatus write_status = in_conn->SendReply();\n            ...\n          }\n          if (!should_close && (pfe->mask & EPOLLIN)) {\n            ReadStatus read_status = in_conn->GetRequest();\n\t\t\t\t\t\t...\n          }\n        }\n      }\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"1\uff0c\u65b0\u5efa\u5ba2\u6237\u7aef\u8fde\u63a5\u65f6\u5019Dispatch Thread\u8c03\u7528HandleNewConn \u5411worker thread \u4f20\u5165fd\u6d88\u606f\uff0cworker thread \u8d1f\u8d23\u8c03\u7528conn_factory \u4e2d\u7684NewPinkConn\u65b9\u6cd5\uff0c\u6309\u7167\u4f7f\u7528\u8005\u7684\u5b9e\u73b0\u65b9\u5f0f\u65b0\u5efa\u4e00\u4e2aconnection\u8d1f\u8d23\u540e\u7eed\u7684\u6570\u636e\u8bfb\u5199\u3002"}),"\n",(0,s.jsx)(e.p,{children:"ConnFactory \u662f\u4e00\u4e2a\u5de5\u5382\u7c7b\uff0c\u7528\u4e8e\u521b\u5efa\u8fde\u63a5\uff0cDispatchThread \u7684\u4f7f\u7528\u8005\u5fc5\u987b\u81ea\u5df1\u5b9e\u73b0\u5176ConnFactory::NewPinkConn \u51fd\u6570\u3002"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-c++",children:"\n\n/*\n * for every conn, we need create a corresponding ConnFactory\n */\nclass ConnFactory {\n public:\n  virtual ~ConnFactory() {}\n  virtual std::shared_ptr<PinkConn> NewPinkConn(\n    int connfd,\n    const std::string &ip_port,\n    Thread *thread,\n    void* worker_private_data, /* Has set in ThreadEnvHandle */\n    PinkEpoll* pink_epoll = nullptr) const = 0;\n};\n"})}),"\n",(0,s.jsx)(e.p,{children:"2\uff0c\u540e\u7eed\u901a\u8fc7\u8c03\u7528\u4e0d\u540cconnection\u5b9e\u73b0\u7684SendReply \u548cGetRequest \u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\u3002"}),"\n",(0,s.jsx)(e.h3,{id:"connection",children:"Connection"}),"\n",(0,s.jsx)(e.p,{children:"PinkConn\u7c7b\u662f\u5bf9\u5ba2\u6237\u7aef\u8fde\u63a5\u7684\u62bd\u8c61\uff0c\u63a7\u5236\u5ba2\u6237\u7aef\u6570\u636e\u7684\u8bfb\u53d6\uff0c\u89e3\u6790\uff0c\u4ee5\u53ca\u7ed3\u679c\u7684\u7f13\u5b58\uff0c\u5199\u56de\u3002\u4e0d\u540c\u534f\u8bae\u7684connection\u56de\u6709\u76f8\u5e94\u7684\u81ea\u5df1\u5b9e\u73b0\uff0c\u8fd9\u91cc\u4ee5RedisConn\u4e3a\u4f8b\u3002"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-c++",children:"class PinkConn : public std::enable_shared_from_this<PinkConn> {\n  virtual ReadStatus GetRequest() = 0;\n  virtual WriteStatus SendReply() = 0;\n  int fd_;\n  std::string ip_port_;\n  bool is_reply_;\n  struct timeval last_interaction_;\n  int flags_;\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"PinkConn \u5f53\u4e2d\u5305\u542b\u4e86GetRequest SendReply\u4e24\u4e2a\u7eaf\u865a\u51fd\u6570\uff0c\u63a7\u5236\u6570\u636e\u5982\u4f55\u8bfb\u53d6\u548c\u5199\u56de\u3002"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-c++",children:"class RedisConn: public PinkConn {\n  RedisConn(const int fd,\n            const std::string& ip_port,\n            ...\n            const HandleType& handle_type = kSynchronous,\n            const int rbuf_max_len = REDIS_MAX_MESSAGE);\n  // serverthread \u6216\u8005 worker thread \u8c03\u7528\n  virtual ReadStatus GetRequest() {\n    // read from socket\n    // forward to redis_parser_, redis_parser will invoke callback\n    // when one command is completely parsed\n    redis_parser_.ProcessInputBuffer();\n  }\n  virtual WriteStatus SendReply() {\n    // write response back\n    while() {\n      nwritten = write(fd(), response_.data() + wbuf_pos_,\n          wbuf_len - wbuf_pos_);\n    }\n  }\n  \n  // RedisConn \u4f7f\u7528\u8005\u8c03\u7528\n  int RedisConn::WriteResp(const std::string& resp) {\n    response_.append(resp);\n    set_is_reply(true);\n    return 0;\n  }\n  // kAsynchronous \u8c03\u7528\u63a5\u53e3\n  virtual void AsynProcessRedisCmds(\n      const std::vector<RedisCmdArgsType>& argvs, std::string* response);\n  void NotifyEpoll(bool success) {\n    // write to server thread or worker thread(conn holder) notify_send_fd\n    // if success true tell conn holder set fd kEpolloutAndEpollin\n    // if success false close conn holder this conn\n  }  \n  //kSynchronous \u8c03\u7528\u63a5\u53e3\n  virtual int DealMessage(\n      const RedisCmdArgsType& argv, std::string* response) = 0;\n  \n  RedisParser redis_parser_;\n  std::string response_;\n}\n\nRedisConn::RedisConn() {\n  // \u521d\u59cb\u5316 \u5c06redis conn\u7684ParserDealMessageCb ParserCompleteCb\u6302\u8f7d\u5230\n  // redis parser\u4e2d\uff0credis parser \u89e3\u6790\u51fa\u5b8c\u6574\u7684\u4e00\u6761redis \u547d\u4ee4\u4f1a\u8c03\u7528\u76f8\n  // \u5e94\u7684ParserDealMessageCb \u6216\u8005ParserCompleteCb \u51fd\u6570\n  RedisParserSettings settings;\n  settings.DealMessage = ParserDealMessageCb;\n  settings.Complete = ParserCompleteCb;\n}\n\n// \u6839\u636e\u5177\u4f53\u7684RedisConn \u7684\u914d\u7f6e\u662f\u5426\u4e3a\u5f02\u6b65\u6a21\u5f0f \u8c03\u7528RedisConn\u7684DealMessage\n// \u51fd\u6570\u6216\u8005AsynProcessRedisCmds\nint RedisConn::ParserDealMessageCb(\n    RedisParser* parser, const RedisCmdArgsType& argv) {\n  RedisConn* conn = reinterpret_cast<RedisConn*>(parser->data);\n  if (conn->GetHandleType() == HandleType::kSynchronous) {\n    return conn->DealMessage(argv, &(conn->response_));\n  } else {\n    return 0;\n  }\n}\nint RedisConn::ParserCompleteCb(\n    RedisParser* parser, const std::vector<RedisCmdArgsType>& argvs) {\n  RedisConn* conn = reinterpret_cast<RedisConn*>(parser->data);\n  if (conn->GetHandleType() == HandleType::kAsynchronous) {\n    conn->AsynProcessRedisCmds(argvs, &(conn->response_));\n  }\n  return 0;\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"RedisConn \u4e2d\u7684redis_parser \u7ed3\u6784\u7528\u4e8e\u89e3\u6790redis \u547d\u4ee4\uff0c\u6bcf\u5f53\u89e3\u6790\u5b8c\u4e00\u6761\u5b8c\u6574\u7684redis \u547d\u4ee4\u540e\u56de\u8c03\u76f8\u5e94\u7684\u56de\u8c03\u51fd\u6570\u3002"}),"\n",(0,s.jsx)(e.p,{children:"1\uff0cGetRequest \u51fd\u6570\u4f1a\u4e0d\u505c\u7684\u4ecesocket\u8bfb\u6570\u636e\uff0c\u653e\u5165redis_parser\u89e3\u6790\u3002redis_parser\u6839\u636e\u89e3\u6790\u60c5\u51b5\u5728\u5408\u9002\u7684\u65f6\u5019\u8c03\u7528\u5176DealMessage Complete\u56de\u8c03\u3002"}),"\n",(0,s.jsx)(e.p,{children:"2\uff0cSendReply \u51fd\u6570\uff0c\u4f1a\u5728\u5408\u9002\u7684\u65f6\u673a\u8c03\u7528write \u5c06response \u7f13\u5b58\u7684\u8fd4\u56de\u6570\u636e\u5199\u5411\u5ba2\u6237\u7aef\u3002"}),"\n",(0,s.jsx)(e.p,{children:"\u4f7f\u7528\u8005\u9700\u8981\u7ee7\u627fRedisConn \u5b9e\u73b0\u7c7b\u4f3cMyRedisConn \u7684\u7c7b\uff0c\u5e76\u4e14\u5728\u5176\u5185\u90e8\u5b9e\u73b0 DealMessage \u51fd\u6570\u6216\u8005AsynProcessRedisCmds\u3002\u53d6\u51b3\u4e8e\u5f53\u524d\u4f7f\u7528\u7684Conn\u7684\u6a21\u5f0f\u3002"}),"\n",(0,s.jsx)(e.p,{children:"kAsynchronous\u6a21\u5f0f\u4e0bAsynProcessRedisCmds \u7684\u5b9e\u73b0\u901a\u5e38\u628a\u89e3\u6790\u597d\u7684Cmd \u4ea4\u4ed8\u7ed9\u53e6\u5916\u7684\u7ebf\u7a0b\u5904\u7406\uff0c\u4f8b\u5982T1\uff0cT1\u5728\u5904\u7406\u5b8c\u547d\u4ee4\u4e4b\u540e\uff0c\u8c03\u7528WriteResp\u63a5\u53e3\u5c06\u7ed3\u679c\u5199\u5165RedisConn\uff0c\u518d\u8c03\u7528NotifyEpoll \u5c06\u8fd9\u4e2aRedisConn \u7684EPOLLOUT\u76d1\u542c\u6253\u5f00\uff0cserverthread \u6216\u8005worker thread\u7684\u4e0b\u4e00\u4e2aepoll \u5faa\u73af \u53ef\u4ee5\u5c06\u7ed3\u679c\u5199\u56de\u3002"}),"\n",(0,s.jsx)(e.p,{children:"kSynchronous \u6a21\u5f0f\u4e0bDealMessage \u7684\u5b9e\u73b0\u901a\u5e38\u4f1a\u76f4\u63a5\u5904\u7406\u547d\u4ee4\u8c03\u7528WriteResp\uff0c\u8fd4\u56deworker thread \u7684ThreadMain \u51fd\u6570\u4e4b\u540e\uff0c\u5728\u4e0b\u4e00\u4e2aepoll\u5faa\u73af\u5c06\u7ed3\u679c\u5199\u56de\u3002"}),"\n",(0,s.jsx)(e.h2,{id:"pika-\u7ebf\u7a0b\u6a21\u578b\u4ee5\u53cacmd\u5904\u7406\u987a\u5e8f",children:"Pika \u7ebf\u7a0b\u6a21\u578b\u4ee5\u53caCmd\u5904\u7406\u987a\u5e8f"}),"\n",(0,s.jsx)(e.p,{children:"Pika \u7684PikaDispatchThread \u662fDispatchThread \u7684\u5b9a\u5236\u5b9e\u73b0\uff0cPikaClientConn\u662fRedisConn \u7684\u5b9a\u5236\u5b9e\u73b0\u3002"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{alt:"alt text",src:r(7399).A+"",width:"1218",height:"385"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-c++",children:"class PikaDispatchThread {\n  class ClientConnFactory : public pink::ConnFactory {\n    virtual std::shared_ptr<pink::PinkConn> NewPinkConn() {\n      return std::static_pointer_cast<pink::PinkConn>\n        (std::make_shared<PikaClientConn>())\n    }\n  }\n  class Handles : public pink::ServerHandle {}\n}\n\nclass PikaClientConn: public pink::RedisConn {\n  void AsynProcessRedisCmds(\n      const std::vector<pink::RedisCmdArgsType>& argvs,\n      std::string* response) override;\n};\nvoid PikaClientConn::AsynProcessRedisCmds() {\n  // schedule to thread pool\n  g_pika_server->ScheduleClientPool(&DoBackgroundTask, arg);\n}\n// thread pool thead start processing cmd\nvoid PikaClientConn::DoBackgroundTask(void* arg) {\n  if (error) {\n    // close conn\n    conn_ptr->NotifyEpoll(false);\n  }\n  conn_ptr->BatchExecRedisCmd(bg_arg->redis_cmds);\n}\nvoid PikaClientConn::BatchExecRedisCmd(\n    const std::vector<pink::RedisCmdArgsType>& argvs) {\n  // process cmd...\n  TryWriteResp();\n}\nvoid PikaClientConn::TryWriteResp() {\n  // write response to local resp\n  ...\n  // notify worker thread open fd EPOLLOUT and ready to write back\n  NotifyEpoll(true);\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{alt:"alt text",src:r(6062).A+"",width:"908",height:"601"})}),"\n",(0,s.jsx)(e.p,{children:"1\uff0c\u65b0\u7684\u5ba2\u6237\u7aef\u8fde\u63a5\u63a5\u5165\u5230DispatchThread\uff0cDispatchThread accept \u5e76\u751f\u6210fd\uff0c\u4f20\u9012\u5230worker thread\u3002"}),"\n",(0,s.jsx)(e.p,{children:"2\uff0cworker thread \u8c03\u7528ClientConnFactory \u7684NewPinkConn \u751f\u6210PikaClientConn\uff0c\u4ece\u6b64\u7ef4\u62a4\u6b64PikaClientConn\u7684\u8bfb\u5199\u884c\u4e3a\u3002"}),"\n",(0,s.jsx)(e.p,{children:"3\uff0cworker thread\u8c03\u7528GetRequest\u8bfb\u53d6\u5ba2\u6237\u7aef\u8bf7\u6c42\u653e\u5165redis_parser \u8fdb\u884c\u89e3\u6790\uff0credis_parser \u8c03\u7528PikaClientConn::AsynProcessRedisCmds\u5b9e\u73b0\u3002\u5c06\u6b64cmd \u653e\u5165thread pool queue\u3002"}),"\n",(0,s.jsx)(e.p,{children:"4\uff0cthread pool thread \u5904\u7406cmd\uff0c\u8c03\u7528PikaClientConn::WriteResp\u5c06\u5904\u7406\u7ed3\u679c\u5199\u5165PikaClientConn\u7684resp \u7ed3\u6784\uff0c\u8c03\u7528PikaClientConn::NotifyEpoll \u901a\u77e5worker thread \u53ef\u4ee5\u8fd4\u56de\u5ba2\u6237\u7aef\u3002"}),"\n",(0,s.jsx)(e.p,{children:"5\uff0cworker thread \u63a5\u6536kNotiEpollout\u4e8b\u4ef6\uff0c\u6253\u5f00\u8fd9\u4e2aconn fd \u7684EPOLLOUT \uff0c\u4e0b\u4e00\u4e2aepoll_wait \u5468\u671f\u68c0\u6d4b\u5230\u8fd9\u4e2aconn\u53ef\u5199\uff0c\u8c03\u7528WriteResp\u5c06resp\u7684\u5185\u5bb9\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002"}),"\n",(0,s.jsx)(e.h2,{id:"reference",children:"Reference"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:"https://github.com/Qihoo360/pika/tree/v3.3.4",children:"https://github.com/Qihoo360/pika/tree/v3.3.4"}),"\n",(0,s.jsx)(e.a,{href:"https://github.com/Qihoo360/pink",children:"https://github.com/Qihoo360/pink"})]})]})}function p(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(l,{...n})}):l(n)}},8924:(n,e,r)=>{r.d(e,{A:()=>s});const s=r.p+"assets/images/image-1-9a1126eeffd6d9e00382d9ea0facef6a.png"},7399:(n,e,r)=>{r.d(e,{A:()=>s});const s=r.p+"assets/images/image-2-d22dac95c46ec5e9cec11a24fcd80157.png"},6062:(n,e,r)=>{r.d(e,{A:()=>s});const s=r.p+"assets/images/image-3-2010433160c1cee4c06a1058f6f052bd.png"},2774:(n,e,r)=>{r.d(e,{A:()=>s});const s=r.p+"assets/images/image-aad65eec86e42083a83018a4357d882b.png"},8453:(n,e,r)=>{r.d(e,{R:()=>d,x:()=>o});var s=r(6540);const i={},t=s.createContext(i);function d(n){const e=s.useContext(t);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:d(n.components),s.createElement(t.Provider,{value:e},n.children)}}}]);