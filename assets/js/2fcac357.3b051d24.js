"use strict";(self.webpackChunkPikiwiDB_Pika_=self.webpackChunkPikiwiDB_Pika_||[]).push([[2885],{8356:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var t=i(4848),r=i(8453);const s={title:"Pika \u4e3b\u4ece\u540c\u6bd4",sidebar_position:2},a=void 0,o={id:"\u8bbe\u8ba1\u4e0e\u5b9e\u73b0/Pika \u4f20\u706b\u8ba1\u5212/\u4e3b\u4ece\u540c\u6b65/index",title:"Pika \u4e3b\u4ece\u540c\u6bd4",description:"alt text",source:"@site/docs/\u8bbe\u8ba1\u4e0e\u5b9e\u73b0/Pika \u4f20\u706b\u8ba1\u5212/\u4e3b\u4ece\u540c\u6b65/index.md",sourceDirName:"\u8bbe\u8ba1\u4e0e\u5b9e\u73b0/Pika \u4f20\u706b\u8ba1\u5212/\u4e3b\u4ece\u540c\u6b65",slug:"/\u8bbe\u8ba1\u4e0e\u5b9e\u73b0/Pika \u4f20\u706b\u8ba1\u5212/\u4e3b\u4ece\u540c\u6b65/",permalink:"/docs/\u8bbe\u8ba1\u4e0e\u5b9e\u73b0/Pika \u4f20\u706b\u8ba1\u5212/\u4e3b\u4ece\u540c\u6b65/",draft:!1,unlisted:!1,editUrl:"https://github.com/OpenAtomFoundation/PikiwiDB-Pika--Website/tree/main/docs/\u8bbe\u8ba1\u4e0e\u5b9e\u73b0/Pika \u4f20\u706b\u8ba1\u5212/\u4e3b\u4ece\u540c\u6b65/index.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Pika \u4e3b\u4ece\u540c\u6bd4",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Pika \u8bfb\u5199\u6d41\u7a0b\u7b80\u4ecb",permalink:"/docs/\u8bbe\u8ba1\u4e0e\u5b9e\u73b0/Pika \u4f20\u706b\u8ba1\u5212/\u8bfb\u5199\u6d41\u7a0b/"},next:{title:"\u7f16\u7801\u89c4\u8303",permalink:"/docs/\u5f00\u53d1\u6587\u6863/"}},l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"\u540c\u6b65\u7ebf\u7a0b\u6a21\u578b",id:"\u540c\u6b65\u7ebf\u7a0b\u6a21\u578b",level:2},{value:"\u4e3b\u4ece\u534f\u5546\u5efa\u7acb\u540c\u6b65",id:"\u4e3b\u4ece\u534f\u5546\u5efa\u7acb\u540c\u6b65",level:2},{value:"MetaSync",id:"metasync",level:3},{value:"TrySync",id:"trysync",level:3},{value:"DbSync",id:"dbsync",level:3},{value:"Master DbSync Behavior",id:"master-dbsync-behavior",level:3},{value:"TrySync",id:"trysync-1",level:3},{value:"DbSync",id:"dbsync-1",level:3},{value:"Master DbSync Behavior",id:"master-dbsync-behavior-1",level:3},{value:"Slave DbSync Behavior",id:"slave-dbsync-behavior",level:3},{value:"BinlogSync",id:"binlogsync",level:3},{value:"\u4e00\u81f4\u6027\u540c\u6b65",id:"\u4e00\u81f4\u6027\u540c\u6b65",level:3},{value:"\u4ece\u5728\u4e00\u81f4\u6027\u573a\u666f\u4e0b\u7684\u6570\u636e\u5199\u5165",id:"\u4ece\u5728\u4e00\u81f4\u6027\u573a\u666f\u4e0b\u7684\u6570\u636e\u5199\u5165",level:3},{value:"\u4e3b\u5728\u4e00\u81f4\u6027\u573a\u666f\u4e0b\u7684\u6570\u636e\u5199\u5165",id:"\u4e3b\u5728\u4e00\u81f4\u6027\u573a\u666f\u4e0b\u7684\u6570\u636e\u5199\u5165",level:3},{value:"Reference",id:"reference",level:2}];function c(n){const e={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{alt:"alt text",src:i(2854).A+"",width:"572",height:"175"})}),"\n",(0,t.jsx)(e.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(e.p,{children:"Pika\u7684\u4e3b\u4ece\u540c\u6b65\u7684\u6982\u5ff5\u5728\u7ecf\u5178\u6a21\u5f0f\u4e0b\u548c\u96c6\u7fa4\u6a21\u5f0f\u4e0b\u4f1a\u6709\u5dee\u5f02\uff0c\u4f46\u662f\u5176\u6700\u57fa\u672c\u7684\u540c\u6b65\u5355\u5143\u90fd\u662f\u5185\u90e8\u7ed3\u6784Partition\u7684\u540c\u6b65\u3002Partition\u662fPika\u4ee3\u7801\u5c42\u9762\u7684\u6700\u5c0f\u540c\u6b65\u5355\u5143\uff0c\u7ecf\u5178\u6a21\u5f0f\u4e0b\u591aDB\u7ed3\u6784\uff0c\u6bcf\u4e00\u4e2aDB\u5bf9\u5e94\u4e00\u4e2aPartition\uff0c\u96c6\u7fa4\u6a21\u5f0f\u4e0b\u6bcf\u4e00\u4e2a\u5206\u7247\u5bf9\u5e94\u4e00\u4e2aPartition\uff0c\u6240\u4ee5\u4e0d\u7ba1\u662f\u4ec0\u4e48\u6a21\u5f0f\uff0c\u53ea\u662f\u8df3\u51faPika\u4ee3\u7801\u4e4b\u5916\u7684\u6982\u5ff5\u6709\u533a\u522b\uff0c\u5728Pika\u4ee3\u7801\u5185\u90e8\u7edf\u79f0\u4e3aPartition\u7684\u540c\u6b65\u3002\u4e0b\u8fb9\u4e3b\u8981\u5173\u6ce8\u7ecf\u5178\u6a21\u5f0f\u4e0b\u591aDB\u7684\u540c\u6b65\u6d41\u7a0b\uff0c\u96c6\u7fa4\u6a21\u5f0f\u4e0b\u7684\u540c\u6b65\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u81ea\u884c\u6574\u7406\u3002"}),"\n",(0,t.jsx)(e.p,{children:"Pika \u7684\u540c\u6b65\u4e3b\u8981\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u9996\u5148\u662f\u8fdb\u7a0b\u7ea7\u522b\u7684\u540c\u6b65\uff0c\u786e\u8ba4\u4e3b\u4ecedb\u4e2a\u6570\u662f\u76f8\u540c\u7684\u3002\u8fd9\u4e00\u8fc7\u7a0b\u79f0\u4e4b\u4e3aMetaSync\u3002\u4e4b\u540e\u6bcf\u4e00\u4e2aPartition\u5355\u72ec\u540c\u6b65\uff0c\u901a\u8fc7\u4ece\u7ed9\u4e3b\u53d1\u9001\u7684TrySync \u4fe1\u606f\uff0c\u67e5\u770b\u4e3b\u4ece\u540c\u6b65\u70b9\u4f4d\uff0c\u4ece\u5224\u65ad\u9700\u8981\u53d1\u8d77\u5168\u91cf\u540c\u6b65\u8fd8\u662f\u589e\u91cf\u540c\u6b65\u3002\u5168\u91cf\u540c\u6b65\u7531DbSync \u6d88\u606f\u6765\u53d1\u8d77\uff0c\u589e\u91cf\u540c\u6b65\u7531BinlogSync \u6d88\u606f\u6765\u53d1\u8d77\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u5168\u540c\u6b65\u505a\u5b8c\uff0c\u4ece\u4f1a\u518d\u53d1\u9001\u4e00\u6b21TrySync\u6d88\u606f\u5c1d\u8bd5BinlogSync\u6765\u540c\u6b65\u5168\u540c\u6b65\u671f\u95f4\u7684\u589e\u91cf\u6570\u636e\u3002"}),"\n",(0,t.jsx)(e.h2,{id:"\u540c\u6b65\u7ebf\u7a0b\u6a21\u578b",children:"\u540c\u6b65\u7ebf\u7a0b\u6a21\u578b"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{alt:"alt text",src:i(668).A+"",width:"670",height:"415"})}),"\n",(0,t.jsx)(e.p,{children:"Pika\u7684\u540c\u6b65\u6a21\u578b\u4e2d\uff0c\u6240\u6709\u540c\u6b65\u6d41\u7a0b\u7684\u53d1\u8d77\u8005\u90fd\u662f\u4ece\u8282\u70b9\uff08\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\uff09\uff0cMetaSync\uff0cTrySync\uff0cDbSync\uff0cBinlogSync\u90fd\u662f\u4ece\u53d1\u8d77\u5230\u4e3b\u3002\u5728MetaSync\uff0cTrySync\uff0cDbSync\uff0cBinlogSync\u6d41\u7a0b\u4e2d\uff0c\u4e3b\u7684\u56de\u590d\u7528\u7684\u8fde\u63a5\u662f\u4ece\u53d1\u8d77\u8bf7\u6c42\u65f6\u5efa\u7acb\u7684\u8fde\u63a5\u3002\u5373\u4e0a\u56fe\u4e2d\u4e3bPikaReplServerThread \u5230 PikaReplClientThread \u7684\u8fde\u63a5\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c++",children:"class PikaAuxiliaryThread : public pink::Thread {\n  virtual void* ThreadMain();\n  while (!should_stop()) {\n    if (g_pika_server->ShouldMetaSync()) {\n      g_pika_rm->SendMetaSyncRequest();\n    } else if (g_pika_server->MetaSyncDone()) {\n      g_pika_rm->RunSyncSlavePartitionStateMachine();\n    }\n    Status s = g_pika_rm->CheckSyncTimeout(slash::NowMicros());\n    s = g_pika_server->TriggerSendBinlogSync();\n    int res = g_pika_server->SendToPeer();\n    if (!res) {\n      // sleep 100 ms\n      mu_.Lock();\n      cv_.TimedWait(100);\n      mu_.Unlock();\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u8f85\u52a9\u7ebf\u7a0b\u7684\u5de5\u4f5c\u4e3b\u8981\u5305\u62ec1\uff09Pika\u540c\u6b65MetaSync\u6d88\u606f\u53d1\u9001\uff0c2\uff09TrySync\u6d88\u606f\u53d1\u9001\uff0c3\uff09\u9a71\u52a8BinlogSync\u6d41\u7a0b\u542f\u52a8\uff0c4\uff09Partition\u7ea7\u522b\u7684keepalive\u548c\u8d85\u65f6\u68c0\u6d4b\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u5176\u4e2d\uff0cSendToPeer\u51fd\u6570\u8d1f\u8d23\u5c1d\u8bd5\u5411\u4ece\u53d1\u9001\u6d88\u606f\uff0c\u8fd4\u56de\u503c\u4ee3\u8868\u53d1\u9001\u4e86\u591a\u5c11\u6761Binlog\uff0c\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u53ef\u4ee5\u53d1\u9001\u7684Binlog\uff0c\u4e3a\u4e86\u8ba9\u51faCPU\u8d44\u6e90\uff0c\u8f85\u52a9\u7ebf\u7a0b\u4f1asleep 100ms\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c++",children:"class PikaReplClient {\n  PikaReplClientThread* client_thread_;\n  std::vector<PikaReplBgWorker*> bg_workers_;\n  Status SendMetaSync();\n  Status SendPartitionDBSync(...);\n  Status SendPartitionTrySync((...);\n  Status SendPartitionBinlogSync(...);\n};\n\nclass PikaReplClientThread : public pink::ClientThread {\n  class ReplClientConnFactory : public pink::ConnFactory {\n    virtual std::shared_ptr<pink::PinkConn> NewPinkConn(...) {\n      return std::make_shared<PikaReplClientConn>(...);\n    }\n  }\n  class ReplClientHandle : public pink::ClientHandle {\n    void FdTimeoutHandle(int fd, const std::string& ip_port) const override;\n    void FdClosedHandle(int fd, const std::string& ip_port) const override;\n  }\n}\n\nclass PikaReplClientConn: public pink::PbConn {\n  int DealMessage() override;\n  static void HandleMetaSyncResponse(void* arg);\n  static void HandleDBSyncResponse(void* arg);\n  static void HandleTrySyncResponse(void* arg);\n  void DispatchBinlogRes(\n    const std::shared_ptr<InnerMessage::InnerResponse> response);\n}\n\nclass PikaReplBgWorker {\n  pink::BGThread bg_thread_;\n  static void HandleBGWorkerWriteBinlog(void* arg);\n  static void HandleBGWorkerWriteDB(void* arg);\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"class PikaReplClient \u4e2d\u5305\u542b\u4e86PikaReplClientThread \u5f02\u6b65\u5ba2\u6237\u7aef\uff0c\u548c\u4e00\u7ec4PikaReplBgWorker\u5f02\u6b65\u5904\u7406binlog\u7684\u8bfb\u5199\u3002\u5e76\u4e14PikaReplClient\u4e2d\u5c01\u88c5\u4e86\u5404\u4e2a\u534f\u8bae\u7684Send\u51fd\u6570\u3002"}),"\n",(0,t.jsx)(e.p,{children:"1\uff0cPikaReplClientThread\u7ee7\u627f\u81eaClientThread\uff0c\u5176\u672c\u8d28\u662f\u4e00\u4e2a\u5f02\u6b65\u7684\u5ba2\u6237\u7aef \uff0c\u5b9a\u4e49\u4e86ReplClientConnFactory\u548cReplClientHandle\u3002ConnFactory \u548cClientHandle \u7684\u542b\u4e49\u8be6\u89c1Pika\u4f20\u706b\u8ba1\u5212\u4e4b\u7ebf\u7a0b\u6a21\u578b\u3002"}),"\n",(0,t.jsx)(e.p,{children:"2\uff0cPikaReplClientConn\u7ee7\u627f\u81eaPbConn\uff0c\u5176\u901a\u4fe1\u534f\u8bae\u4e3aProtobuf\u534f\u8bae\uff0c\u5176\u4e2d\u5305\u542b\u4e86PikaReplClientThread\u63a5\u6536\u5230\u76f8\u5e94\u534f\u8bae\u7684\u5904\u7406\u51fd\u6570\u3002"}),"\n",(0,t.jsx)(e.p,{children:"3\uff0cPikaReplBgWorker\u662f\u9ad8\u6548\u5904\u7406\u540c\u6b65\u8fc7\u6765Binlog\u7684\u4e00\u7ec4\u5de5\u4f5c\u7ebf\u7a0b\u3002PikaReplClientThread\u63a5\u6536\u5230\u76f8\u5e94\u534f\u8bae\u62a5\u6587\u540e\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u963b\u585e\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u672c\u5730Binlog\u5199\u5165\u548cDb\u7684\u5199\u5165\u7b49\u64cd\u4f5c\u4f1a\u76f4\u63a5\u5b89\u6392\u7ed9PikaReplBgWorker \u64cd\u4f5c\u3002\u907f\u514d\u963b\u585ePikaReplClientThread\u540e\u7eed\u62a5\u6587\u7684\u5904\u7406\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c++",children:"class PikaReplServer {\n  // thread pool size PIKA_REPL_SERVER_TP_SIZE 3\n  pink::ThreadPool* server_tp_;\n  PikaReplServerThread* pika_repl_server_thread_;\n  slash::Status SendSlaveBinlogChips(\n    const std::string& ip,\n    int port, const std::vector<WriteTask>& tasks);\n  void Schedule(pink::TaskFunc func, void* arg);\n}\n\nclass PikaReplServerThread : public pink::HolyThread {\n  class ReplServerConnFactory : public pink::ConnFactory {\n    virtual std::shared_ptr<pink::PinkConn> NewPinkConn(...) {\n      return std::make_shared<PikaReplServerConn>(...);\n    }\n  }\n  class ReplServerHandle : public pink::ServerHandle {\n    virtual void FdClosedHandle(\n        int fd, const std::string& ip_port) const override;\n  }\n}\n\nclass PikaReplServerConn: public pink::PbConn {\n  int DealMessage();\n  static void HandleMetaSyncRequest(void* arg);\n  static void HandleTrySyncRequest(void* arg);\n  static void HandleDBSyncRequest(void* arg);\n  static void HandleBinlogSyncRequest(void* arg);\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"class PikaReplServer \u5305\u542b\u4e86\u4e00\u4e2a\u5c0f\u578b\u7ebf\u7a0b\u6c60ThreadPool\uff0c\u548cPikaReplServerThread\u3002\u5e76\u4e14\u5305\u542b\u4e86\u53d1\u9001Binlog\u7684\u63a5\u53e3SendSlaveBinlogChips\u3002"}),"\n",(0,t.jsx)(e.p,{children:"1\uff0cPikaReplServerThread\u7ee7\u627f\u81eaHolyThread\uff0cHolyThread\u7ee7\u627f\u81eaServerThread\uff0c\u5b9e\u73b0\u4e86HandleConnEvent\u548cHandleNewConn\uff0c\u662f\u4e00\u4e2a\u5355\u7ebf\u7a0b\u7684\u8f7b\u91cf\u7ea7server\u3002\u540c\u65f6\u4e5f\u5b9e\u73b0\u4e86ReplServerConnFactory \u548cReplServerHandle\u3002"}),"\n",(0,t.jsx)(e.p,{children:"2\uff0cPikaReplServerConn \u7ee7\u627f\u81eaPbConn\uff0c\u5176\u901a\u4fe1\u534f\u8bae\u4e5f\u662fProtobuf\u534f\u8bae\u3002\u5176\u4e2d\u8fd8\u5305\u542b\u4e86PikaReplServerThread\u63a5\u6536\u5230\u76f8\u5e94\u534f\u8bae\u7684\u5904\u7406\u51fd\u6570\u3002"}),"\n",(0,t.jsx)(e.p,{children:"3\uff0c\u7531\u4e8ePikaReplServerThread \u7531\u4e8e\u6536\u5230Binlog\u7684ack\u4e4b\u540e\u4f1a\u4ece\u78c1\u76d8\u4e2d\u52a0\u8f7d\u4e0b\u6b21\u540c\u6b65\u5230\u4ece\u7684binlog\u5230\u5185\u5b58\u4e2d\uff0c\u6240\u4ee5\u4e3a\u4e86\u907f\u514d\u963b\u585ePikaReplServerThread\u540e\u7eed\u62a5\u6587\u5904\u7406\uff0c\u4f1a\u963b\u585e\u7684\u64cd\u4f5c\u88ab\u5b89\u6392\u5230\u4e86ThreadPool \u5f53\u4e2d\u3002"}),"\n",(0,t.jsx)(e.h2,{id:"\u4e3b\u4ece\u534f\u5546\u5efa\u7acb\u540c\u6b65",children:"\u4e3b\u4ece\u534f\u5546\u5efa\u7acb\u540c\u6b65"}),"\n",(0,t.jsx)(e.p,{children:"\u4e3b\u4ece\u5efa\u7acb\u540c\u6b65\u7684\u8fc7\u7a0b\u5206\u4e3aMetaSync=>TrySync=>BinlogSync\uff0c\u6216\u8005MetaSync=>TrySync=>DbSync=>BinlogSync\u4e24\u79cd\u6a21\u5f0f\u3002MetaSync \u662f\u8fdb\u7a0b\u4e4b\u95f4\u7684\u4e3b\u4ece\u540c\u6b65db\u4e2a\u6570\u662f\u5426\u4e00\u6837\u3002TrySync\u662f\u6bcf\u4e00\u4e2a\u4ecePartition\u4e3b\u52a8\u53d1\u8d77\uff0c\u5c06\u81ea\u5df1Binlog\u7684\u4f4d\u7f6e\u53d1\u9001\u7ed9\u4e3b\uff0c\u63a5\u6536\u5230\u4e3b\u7684\u8fd4\u56deTrySyncResp\u4e4b\u540e\uff0c\u8fdb\u4e00\u6b65\u5224\u65ad\u662f\u5168\u91cf\u540c\u6b65\u505aDbSync \u8fd8\u662f\u76f4\u63a5\u53ef\u4ee5\u589e\u91cf\u540c\u6b65\u505aBinlogSync\u3002"}),"\n",(0,t.jsx)(e.h3,{id:"metasync",children:"MetaSync"}),"\n",(0,t.jsx)(e.p,{children:"\u5728\u6b63\u5f0f\u5efa\u7acb\u540c\u6b65\u4e4b\u524d\u9700\u8981\u5bf9\u4e8e\u4e3b\u4ece\u8fdb\u7a0b\u7684\u7684db\u4e2a\u6570\u8fdb\u884c\u786e\u8ba4\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u79f0\u4e4b\u4e3aMetaSync\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u5176\u4ea4\u4e92\u8fc7\u7a0b\u5982\u4e0b\u3002"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{alt:"alt text",src:i(5751).A+"",width:"622",height:"348"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c++",children:"\n\nvoid PikaReplServerConn::HandleMetaSyncRequest(void* arg) {\n  // build server table meta info\n  ...;\n  // use same conn write back\n  conn->WriteResp(reply_str);\n  conn->NotifyWrite();\n}\n\nvoid PikaReplClientConn::HandleMetaSyncResponse(void* arg) {\n  // check if table is the same as master's\n  if (!PikaReplClientConn::IsTableStructConsistent(...))) {\n    g_pika_server->SyncError();\n    conn->NotifyClose();\n  }\n  g_pika_server->FinishMetaSync();\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"trysync",children:"TrySync"}),"\n",(0,t.jsx)(e.p,{children:"MetaSync\u4e4b\u540e\uff0c\u6bcf\u4e00\u4e2aPartition\u5355\u72ec\u505aTrySync\uff0c\u4ece\u7684Partition \u5e26\u7740\u81ea\u5df1\u5f53\u524d\u7684\u540c\u6b65\u70b9\u4f4d\u5411\u4e3b\u505a\u8bf7\u6c42\u3002\u4e3b\u6839\u636e\u4ece\u7684TrySync\u6d88\u606f\uff0c\u5982\u679c\u672c\u5730\u6709\u4ece\u53d1\u9001\u8fc7\u6765\u7684\u70b9\u4f4d\uff0c\u5219\u56de\u590d\u5efa\u8bae\u8fdb\u884c\u589e\u91cf\u540c\u6b65\u8d70BinlogSync\u6d41\u7a0b\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219\u56de\u590d\u5efa\u8bae\u8fdb\u884c\u5168\u91cf\u540c\u6b65\u8d70DbSync\u6d41\u7a0b\u3002"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{alt:"alt text",src:i(5758).A+"",width:"587",height:"306"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c++",children:"void PikaReplServerConn::HandleTrySyncRequest(void* arg) {\n  // master check if slave offset is valid\n  ...;\n  // master check if this slave is already exist\n  if (!partition->CheckSlaveNodeExist(node.ip(), node.port())) {\n    int32_t session_id = partition->GenSessionId();\n    try_sync_response->set_session_id(session_id);\n    Status s = partition->AddSlaveNode(node.ip(), node.port(), session_id);\n  } else {\n    Status s = partition->GetSlaveNodeSession(\n        node.ip(), node.port(), &session_id);\n    try_sync_response->set_session_id(session_id);\n  }\n  onn->WriteResp(reply_str);\n  conn->NotifyWrite();\n}\n\nvoid PikaReplClientConn::HandleTrySyncResponse(void* arg) {\n  if (try_sync_response.reply_code()\n      == InnerMessage::InnerResponse::TrySync::kOk) {\n    slave_partition->SetMasterSessionId(session_id);\n    g_pika_rm->SendPartitionBinlogSyncAckRequest(\n      table_name, partition_id, offset, offset, true);\n    slave_partition->SetReplState(ReplState::kConnected);\n  } else if (try_sync_response.reply_code() == kSyncPointBePurged) {\n    // Need To Try DBSync\n    slave_partition->SetReplState(ReplState::kTryDBSync);\n  } else if (try_sync_response.reply_code() == kSyncPointLarger) {\n    // rySync Error, Because the invalid filenum and offset\n    slave_partition->SetReplState(ReplState::kError);\n  } else if (try_sync_response.reply_code() == kError) {\n    slave_partition->SetReplState(ReplState::kError);\n  }\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u4ece\u8282\u70b9\u63a5\u6536\u5230TrySyncResponse\u4e4b\u540e"}),"\n",(0,t.jsx)(e.p,{children:"1\uff0c\uff08kOk\uff09 \u5982\u679c\u4ece\u8fd4\u56de\u6ca1\u6709\u95ee\u9898\uff0c\u5219\u8fdb\u884c\u589e\u91cf\u540c\u6b65\uff0c\u53d1\u9001BinlogSync\u6d88\u606f\u3002"}),"\n",(0,t.jsx)(e.p,{children:"2\uff0c\uff08kSyncPointBePurged\uff09\u5982\u679c\u81ea\u5df1\u7684\u540c\u6b65\u70b9\u4f4d\uff0c\u5728\u4e3b\u8282\u70b9\u5df2\u7ecf\u88ab\u6e05\u9664\u3002\u5219\u8fdb\u884c\u5168\u91cf\u540c\u6b65\uff0c\u53d1\u9001DbSync \u6d88\u606f\u3002"}),"\n",(0,t.jsx)(e.p,{children:"3\uff0c\uff08kSyncPointLarger\uff09\u5982\u679c\u4ece\u70b9\u4f4d\u6bd4\u4e3b\u8d85\u524d\uff0c\u8bf4\u660e\u4ece\u4e0a\u7684\u6570\u636e\u6709\u4e00\u90e8\u5206\u662f\u810f\u6570\u636e\uff0c\u5c06\u540c\u6b65\u7ec8\u6b62\uff08kError\uff09\uff0c\u9700\u8981\u7ba1\u7406\u5458\u4ecb\u5165\u3002"}),"\n",(0,t.jsx)(e.p,{children:"4\uff0c\uff08kError\uff09\u5982\u679c\u4e3b\u8fd4\u56de\u7684TrySyncResponse \u6709\u5f02\u5e38\uff0c\u90a3\u4e48\u5c06\u540c\u6b65\u7ec8\u6b62\uff08kError\uff09\uff0c\u9700\u8981\u7ba1\u7406\u5458\u4ecb\u5165\u3002"}),"\n",(0,t.jsx)(e.h3,{id:"dbsync",children:"DbSync"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{alt:"alt text",src:i(8849).A+"",width:"603",height:"359"})}),"\n",(0,t.jsx)(e.p,{children:"Pika\u5168\u91cf\u540c\u6b65\uff0c\u4e3b\u8981\u4f9d\u8d56\u4e8eRSYNC\u5de5\u5177\uff0c\u901a\u8fc7system\u8c03\u7528\u8d77RSYNC\u8fdb\u7a0b\uff0c\u5c06\u4e3b\u4e0a\u6570\u636e\u63a8\u5230\u4ece\u4e0a\u3002\u76ee\u524d\u4ece\u4e0a\u4e00\u76f4\u8d77\u4e00\u4e2aRSYNC\u5e38\u9a7b\u8fdb\u7a0b\uff0c\u4e13\u95e8\u8d1f\u8d23\u63a5\u6536\u4e3b\u540c\u6b65\u8fc7\u6765\u7684\u5168\u540c\u6b65\u6570\u636e\u3002"}),"\n",(0,t.jsx)(e.h3,{id:"master-dbsync-behavior",children:"Master DbSync Behavior"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c++",children:"void PikaReplServerConn::HandleDBSyncRequest(void* arg) {\n  // sanity check\n  ...;\n  g_pika_server->TryDBSync(node.ip(), node.port() + kPortShiftRSync,\n      table_name, partition_id);\n  conn->WriteResp(reply_str);\n  conn->NotifyWrite();\n}\n\nvoid PikaServer::TryDBSync(const std::string& ip, int port,\n                           const std::string& table_name,\n                           uint32_t partition_id) {\n  partition->BgSavePartition();\n  DBSync(ip, port, table_name, partition_id);\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u4e3b\u6536\u5230HandleDBSyncRequest"}),"\n",(0,t.jsx)(e.p,{children:"1\uff0c\u8c03\u7528TryDBSync\u7684BgSavePartition\uff0c\u5f02\u6b65\u5c06\u5bf9\u5e94\u7684partition\u6253\u5feb\u7167\u3002"}),"\n",(0,t.jsx)(e.p,{children:"2\uff0c\u8c03\u7528DBSync \u5f02\u6b65\u53d1\u9001\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u4e3a\u4fdd\u8bc1\u6253\u5feb\u7167\u548c\u53d1\u9001\u7684\u6587\u4ef6\u7684\u5148\u540e\u5faa\u5e8f\uff0c\u8fd9\u4e24\u4e2a\u4efb\u52a1\u7531\u540c\u4e00\u4e2a\u7ebf\u7a0b\u5b8c\u6210\u3002\u8fd9\u4e2a\u7ebf\u7a0b\u4f1a\u6839\u636e\u653e\u5165\u5176\u6d88\u8d39\u961f\u5217\u7684\u987a\u5e8f\u4f9d\u6b21\u6267\u884c\u4efb\u52a1\u3002\u8fd9\u91cc\u4e00\u5b9a\u662f\u5148\u6267\u884c\u6253\u5feb\u7167\u4efb\u52a1\uff0c\u518d\u6267\u884c\u53d1\u9001\u6587\u4ef6\u4efb\u52a1\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c++",children:"void Partition::BgSavePartition() {\n  slash::MutexLock l(&bgsave_protector_);\n  if (bgsave_info_.bgsaving) {\n    return;\n  }\n  bgsave_info_.bgsaving = true;\n  BgTaskArg* bg_task_arg = new BgTaskArg();\n  bg_task_arg->partition = shared_from_this();\n  g_pika_server->BGSaveTaskSchedule(\n      &DoBgSave, static_cast<void*>(bg_task_arg));\n}\n\nvoid PikaServer::BGSaveTaskSchedule(pink::TaskFunc func, void* arg) {\n  bgsave_thread_.StartThread();\n  bgsave_thread_.Schedule(func, arg);\n}\n\nvoid Partition::DoBgSave(void* arg) {\n  // do bgsave https://github.com/Qihoo360/pika/wiki/pika-\u5feb\u7167\u5f0f\u5907\u4efd\u65b9\u6848\n  // generate a info file indicate this snapshot's binlog filenum and offset\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"1\uff0c\u8c03\u7528BGSaveTaskSchedule\u5c06\u6253\u5feb\u7167\u4efb\u52a1\u653e\u5165bgsave_thread\u7684\u6d88\u8d39\u961f\u5217\u4e2d\u3002"}),"\n",(0,t.jsx)(e.p,{children:"2\uff0cbgsave_thread\u8c03\u7528DoBgSave \u5bf9\u5f53\u524d\u7684DB\u72b6\u6001\u6253\u5feb\u7167\u5e76\u4e14\u751f\u6210info\u6587\u4ef6\uff0cinfo\u6587\u4ef6\u662f\u4ee3\u8868\u8fd9\u4e2a\u5feb\u7167\u5bf9\u5e94\u7684binlog filenum\u548coffset \u7684\u4f4d\u7f6e\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c++",children:"void PikaServer::DBSync(const std::string& ip, int port,\n                        const std::string& table_name,\n                        uint32_t partition_id) {\n  // check if this partition_is is processing dbsync\n  ...;\n  // Reuse the bgsave_thread_\n  // Since we expect BgSave and DBSync execute serially\n  bgsave_thread_.Schedule(&DoDBSync, reinterpret_cast<void*>(arg));\n}\n\n// DoDBSync\nvoid PikaServer::DbSyncSendFile(const std::string& ip, int port,\n                                const std::string& table_name,\n                                uint32_t partition_id) {\n  // sending files\n  ...;\n  // Send info file at last\n  ...;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"trysync-1",children:"TrySync"}),"\n",(0,t.jsx)(e.p,{children:"MetaSync\u4e4b\u540e\uff0c\u6bcf\u4e00\u4e2aPartition\u5355\u72ec\u505aTrySync\uff0c\u4ece\u7684Partition \u5e26\u7740\u81ea\u5df1\u5f53\u524d\u7684\u540c\u6b65\u70b9\u4f4d\u5411\u4e3b\u505a\u8bf7\u6c42\u3002\u4e3b\u6839\u636e\u4ece\u7684TrySync\u6d88\u606f\uff0c\u5982\u679c\u672c\u5730\u6709\u4ece\u53d1\u9001\u8fc7\u6765\u7684\u70b9\u4f4d\uff0c\u5219\u56de\u590d\u5efa\u8bae\u8fdb\u884c\u589e\u91cf\u540c\u6b65\u8d70BinlogSync\u6d41\u7a0b\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219\u56de\u590d\u5efa\u8bae\u8fdb\u884c\u5168\u91cf\u540c\u6b65\u8d70DbSync\u6d41\u7a0b\u3002"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{alt:"alt text",src:i(6136).A+"",width:"587",height:"306"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c++",children:"void PikaReplServerConn::HandleTrySyncRequest(void* arg) {\n  // master check if slave offset is valid\n  ...;\n  // master check if this slave is already exist\n  if (!partition->CheckSlaveNodeExist(node.ip(), node.port())) {\n    int32_t session_id = partition->GenSessionId();\n    try_sync_response->set_session_id(session_id);\n    Status s = partition->AddSlaveNode(node.ip(), node.port(), session_id);\n  } else {\n    Status s = partition->GetSlaveNodeSession(\n        node.ip(), node.port(), &session_id);\n    try_sync_response->set_session_id(session_id);\n  }\n  onn->WriteResp(reply_str);\n  conn->NotifyWrite();\n}\n\nvoid PikaReplClientConn::HandleTrySyncResponse(void* arg) {\n  if (try_sync_response.reply_code()\n      == InnerMessage::InnerResponse::TrySync::kOk) {\n    slave_partition->SetMasterSessionId(session_id);\n    g_pika_rm->SendPartitionBinlogSyncAckRequest(\n      table_name, partition_id, offset, offset, true);\n    slave_partition->SetReplState(ReplState::kConnected);\n  } else if (try_sync_response.reply_code() == kSyncPointBePurged) {\n    // Need To Try DBSync\n    slave_partition->SetReplState(ReplState::kTryDBSync);\n  } else if (try_sync_response.reply_code() == kSyncPointLarger) {\n    // rySync Error, Because the invalid filenum and offset\n    slave_partition->SetReplState(ReplState::kError);\n  } else if (try_sync_response.reply_code() == kError) {\n    slave_partition->SetReplState(ReplState::kError);\n  }\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u4ece\u8282\u70b9\u63a5\u6536\u5230TrySyncResponse\u4e4b\u540e"}),"\n",(0,t.jsx)(e.p,{children:"1\uff0c\uff08kOk\uff09 \u5982\u679c\u4ece\u8fd4\u56de\u6ca1\u6709\u95ee\u9898\uff0c\u5219\u8fdb\u884c\u589e\u91cf\u540c\u6b65\uff0c\u53d1\u9001BinlogSync\u6d88\u606f\u3002"}),"\n",(0,t.jsx)(e.p,{children:"2\uff0c\uff08kSyncPointBePurged\uff09\u5982\u679c\u81ea\u5df1\u7684\u540c\u6b65\u70b9\u4f4d\uff0c\u5728\u4e3b\u8282\u70b9\u5df2\u7ecf\u88ab\u6e05\u9664\u3002\u5219\u8fdb\u884c\u5168\u91cf\u540c\u6b65\uff0c\u53d1\u9001DbSync \u6d88\u606f\u3002"}),"\n",(0,t.jsx)(e.p,{children:"3\uff0c\uff08kSyncPointLarger\uff09\u5982\u679c\u4ece\u70b9\u4f4d\u6bd4\u4e3b\u8d85\u524d\uff0c\u8bf4\u660e\u4ece\u4e0a\u7684\u6570\u636e\u6709\u4e00\u90e8\u5206\u662f\u810f\u6570\u636e\uff0c\u5c06\u540c\u6b65\u7ec8\u6b62\uff08kError\uff09\uff0c\u9700\u8981\u7ba1\u7406\u5458\u4ecb\u5165\u3002"}),"\n",(0,t.jsx)(e.p,{children:"4\uff0c\uff08kError\uff09\u5982\u679c\u4e3b\u8fd4\u56de\u7684TrySyncResponse \u6709\u5f02\u5e38\uff0c\u90a3\u4e48\u5c06\u540c\u6b65\u7ec8\u6b62\uff08kError\uff09\uff0c\u9700\u8981\u7ba1\u7406\u5458\u4ecb\u5165\u3002"}),"\n",(0,t.jsx)(e.h3,{id:"dbsync-1",children:"DbSync"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{alt:"alt text",src:i(627).A+"",width:"603",height:"359"})}),"\n",(0,t.jsx)(e.p,{children:"Pika\u5168\u91cf\u540c\u6b65\uff0c\u4e3b\u8981\u4f9d\u8d56\u4e8eRSYNC\u5de5\u5177\uff0c\u901a\u8fc7system\u8c03\u7528\u8d77RSYNC\u8fdb\u7a0b\uff0c\u5c06\u4e3b\u4e0a\u6570\u636e\u63a8\u5230\u4ece\u4e0a\u3002\u76ee\u524d\u4ece\u4e0a\u4e00\u76f4\u8d77\u4e00\u4e2aRSYNC\u5e38\u9a7b\u8fdb\u7a0b\uff0c\u4e13\u95e8\u8d1f\u8d23\u63a5\u6536\u4e3b\u540c\u6b65\u8fc7\u6765\u7684\u5168\u540c\u6b65\u6570\u636e\u3002"}),"\n",(0,t.jsx)(e.h3,{id:"master-dbsync-behavior-1",children:"Master DbSync Behavior"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c++",children:"void PikaReplServerConn::HandleDBSyncRequest(void* arg) {\n  // sanity check\n  // ...;\n  g_pika_server->TryDBSync(node.ip(), node.port() + kPortShiftRSync,\n      table_name, partition_id);\n  conn->WriteResp(reply_str);\n  conn->NotifyWrite();\n}\n\nvoid PikaServer::TryDBSync(const std::string& ip, int port,\n                           const std::string& table_name,\n                           uint32_t partition_id) {\n  partition->BgSavePartition();\n  DBSync(ip, port, table_name, partition_id);\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u4e3b\u6536\u5230HandleDBSyncRequest"}),"\n",(0,t.jsx)(e.p,{children:"1\uff0c\u8c03\u7528TryDBSync\u7684BgSavePartition\uff0c\u5f02\u6b65\u5c06\u5bf9\u5e94\u7684partition\u6253\u5feb\u7167\u3002"}),"\n",(0,t.jsx)(e.p,{children:"2\uff0c\u8c03\u7528DBSync \u5f02\u6b65\u53d1\u9001\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u4e3a\u4fdd\u8bc1\u6253\u5feb\u7167\u548c\u53d1\u9001\u7684\u6587\u4ef6\u7684\u5148\u540e\u5faa\u5e8f\uff0c\u8fd9\u4e24\u4e2a\u4efb\u52a1\u7531\u540c\u4e00\u4e2a\u7ebf\u7a0b\u5b8c\u6210\u3002\u8fd9\u4e2a\u7ebf\u7a0b\u4f1a\u6839\u636e\u653e\u5165\u5176\u6d88\u8d39\u961f\u5217\u7684\u987a\u5e8f\u4f9d\u6b21\u6267\u884c\u4efb\u52a1\u3002\u8fd9\u91cc\u4e00\u5b9a\u662f\u5148\u6267\u884c\u6253\u5feb\u7167\u4efb\u52a1\uff0c\u518d\u6267\u884c\u53d1\u9001\u6587\u4ef6\u4efb\u52a1\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c++",children:"void Partition::BgSavePartition() {\n  slash::MutexLock l(&bgsave_protector_);\n  if (bgsave_info_.bgsaving) {\n    return;\n  }\n  bgsave_info_.bgsaving = true;\n  BgTaskArg* bg_task_arg = new BgTaskArg();\n  bg_task_arg->partition = shared_from_this();\n  g_pika_server->BGSaveTaskSchedule(\n      &DoBgSave, static_cast<void*>(bg_task_arg));\n}\n\nvoid PikaServer::BGSaveTaskSchedule(pink::TaskFunc func, void* arg) {\n  bgsave_thread_.StartThread();\n  bgsave_thread_.Schedule(func, arg);\n}\n\nvoid Partition::DoBgSave(void* arg) {\n  // do bgsave https://github.com/Qihoo360/pika/wiki/pika-\u5feb\u7167\u5f0f\u5907\u4efd\u65b9\u6848\n  // generate a info file indicate this snapshot's binlog filenum and offset\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"1\uff0c\u8c03\u7528BGSaveTaskSchedule\u5c06\u6253\u5feb\u7167\u4efb\u52a1\u653e\u5165bgsave_thread\u7684\u6d88\u8d39\u961f\u5217\u4e2d\u3002"}),"\n",(0,t.jsx)(e.p,{children:"2\uff0cbgsave_thread\u8c03\u7528DoBgSave \u5bf9\u5f53\u524d\u7684DB\u72b6\u6001\u6253\u5feb\u7167\u5e76\u4e14\u751f\u6210info\u6587\u4ef6\uff0cinfo\u6587\u4ef6\u662f\u4ee3\u8868\u8fd9\u4e2a\u5feb\u7167\u5bf9\u5e94\u7684binlog filenum\u548coffset \u7684\u4f4d\u7f6e\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c++",children:"void PikaServer::DBSync(const std::string& ip, int port,\n                        const std::string& table_name,\n                        uint32_t partition_id) {\n  // check if this partition_is is processing dbsync\n  ...;\n  // Reuse the bgsave_thread_\n  // Since we expect BgSave and DBSync execute serially\n  bgsave_thread_.Schedule(&DoDBSync, reinterpret_cast<void*>(arg));\n}\n\n// DoDBSync\nvoid PikaServer::DbSyncSendFile(const std::string& ip, int port,\n                                const std::string& table_name,\n                                uint32_t partition_id) {\n  // sending files\n  ...;\n  // Send info file at last\n  ...;\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"1, \u8c03\u7528DBSync \u5c06\u53d1\u9001\u6587\u4ef6\u7684\u4efb\u52a1\u653e\u5165bgsave_thread\u7684\u6d88\u8d39\u961f\u5217\u4e2d\u3002"}),"\n",(0,t.jsx)(e.p,{children:"2\uff0cbgsave_thread\u8c03\u7528DbSyncSendFile\uff0c\u4f9d\u6b21\u53d1\u9001\u5feb\u7167\u7684\u6587\u4ef6\u3002\u6700\u540e\u53d1\u9001info\u6587\u4ef6\u3002"}),"\n",(0,t.jsx)(e.h3,{id:"slave-dbsync-behavior",children:"Slave DbSync Behavior"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c++",children:"void PikaReplClientConn::HandleDBSyncResponse(void* arg) {\n  slave_partition->SetReplState(ReplState::kWaitDBSync);\n}\n\n// PikaAuxiliaryThread invoke this periodically\nStatus PikaReplicaManager::RunSyncSlavePartitionStateMachine() {\n  if (s_partition->State() == ReplState::kWaitDBSync) {\n    rtition->TryUpdateMasterOffset();\n  }\n}\n\nbool Partition::TryUpdateMasterOffset() {\n// 1, Check dbsync finished, got the new binlog offset from info file\n// 2, Replace the old db\n// 3, Update master offset, and TrySync again\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"1\uff0c\u4ece\u6536\u5230DBSyncResponse \u5c06partition\u7f6e\u4e3akWaitDBSync\u3002"}),"\n",(0,t.jsx)(e.p,{children:"2\uff0c\u8f85\u52a9\u7ebf\u7a0bPikaAuxiliaryThread \u5468\u671f\u6027\u68c0\u67e5DbSync \u6709\u6ca1\u6709\u7ed3\u675f\uff0c\u7ed3\u675f\u7684\u6807\u5fd7\u4e3a\u5728\u672c\u5730\u68c0\u6d4b\u5230Info\u6587\u4ef6\u7684\u5b58\u5728\u3002"}),"\n",(0,t.jsx)(e.p,{children:"3\uff0c\u5982\u679cDbSync \u68c0\u6d4b\u5b8c\uff0c\u89e3\u6790info\u6587\u4ef6\u7684filenum offset\uff0c\u66ff\u6362\u672c\u5730\u7684Db\uff0c\u672c\u5730\u66ff\u6362\u6210\u65b0\u7684filenum\u548coffset\uff0c\u5e76\u4e14\u91cd\u8d70TrySync\u6d41\u7a0b\uff0c\u540c\u6b65DbSync\u671f\u95f4\u4ea7\u751f\u7684\u589e\u91cf\u3002"}),"\n",(0,t.jsx)(e.h3,{id:"binlogsync",children:"BinlogSync"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{alt:"alt text",src:i(9866).A+"",width:"588",height:"486"})}),"\n",(0,t.jsx)(e.p,{children:"BinlogSync\u7684\u540c\u6b65\u903b\u8f91\uff0c\u4e5f\u662f\u4ece\u53d1\u8d77\u7684\u3002"}),"\n",(0,t.jsx)(e.p,{children:"1\uff0c\u4ece\u5148\u53d1\u9001\u4e00\u4e2aBinlogSyncRequest\uff0c\u5176\u4e2d\u6709\u4e00\u4e2afirst_send\u6807\u5fd7\uff0c\u7b2c\u4e00\u6b21\u53d1\u9001\u8bbe\u7f6efirst_send\u4e3aTrue\u3002"}),"\n",(0,t.jsx)(e.p,{children:"2\uff0c\u4e3b\u4e0a\u6536\u5230BinlogSyncRequest\u770b\u5230first_send\u4e3atrue\uff0c\u5219\u4f1a\u76f8\u5e94\u505a\u4e00\u4e9b\u521d\u59cb\u5316\u5de5\u4f5c\uff0c\u4e4b\u540e\u5c06\u5f85\u53d1\u9001\u6570\u636e\u5199\u5165RM::write_queues\u4e2d\u3002\u7136\u540e\u7531\u8f85\u52a9\u7ebf\u7a0b\u7528\u4e4b\u524d\u4ece\u521b\u5efa\u7684\u8fde\u63a5\u53d1\u9001write_queues\u4e2d\u7684Binlog\u6570\u636e\u3002"}),"\n",(0,t.jsx)(e.p,{children:"3\uff0c\u4ece\u63a5\u5230Binlog\u6570\u636e\u540e\uff0c\u8fd4\u56de\u76f8\u5e94\u7684BinlogSyncAck\u6d88\u606f\uff08\u590d\u7528BinlogSyncRequest\u7ed3\u6784\uff09\u3002"}),"\n",(0,t.jsx)(e.p,{children:"4\uff0c\u4e3b\u6536\u5230BinlogSyncAck\u4f1a\uff0c\u7ee7\u7eed\u5c06\u540e\u7eed\u5e26\u53d1\u9001\u6570\u636e\u518d\u5199\u5165write_queues \u7531\u8f85\u52a9\u7ebf\u7a0b\u53d1\u9001\u5230\u4ece\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u9700\u8981\u6ce8\u610f\u7684\u662f\u4ee5\u4e0b\u4e24\u79cd\u573a\u666f\uff1a"}),"\n",(0,t.jsx)(e.p,{children:"1\uff0c\u5f53\u4e3b\u4ece\u6570\u636e\u5b8c\u5168\u4e00\u81f4\uff0c\u5e76\u4e14\u8fc7\u4e86\u5f88\u4e45\u6ca1\u6709\u540c\u6b65\u6570\u636e\u7684\u65f6\u5019\uff0c\u8f85\u52a9\u7ebf\u7a0b\u4f1a\u4e3a\u4e86\u4fdd\u6301\u8fde\u63a5\u7684keepalive\uff0c\u4f1a\u6bcf\u9694kSendKeepAliveTimeout \u5411\u8fd9\u6761\u8fde\u63a5\u53d1\u9001keealive\u6d88\u606f\u3002\u5e76\u4e14\u68c0\u67e5\u4e3b\u7684last_recv_time\uff0c\u5982\u679c\u8d85\u8fc7kRecvKeepAliveTimeout\u6ca1\u6709\u6536\u5230\u4efb\u4f55\u6d88\u606f\uff0c\u5219\u4e3b\u52a8\u5c06\u8fde\u63a5\u65ad\u5f00\u3002"}),"\n",(0,t.jsx)(e.p,{children:"2\uff0c\u7531\u4e8e\u4ece\u662fBinlogSync\u7684\u53d1\u8d77\u8005\uff0c\u4f46\u662f\u4e00\u6bb5\u65f6\u95f4\u6ca1\u6709\u6570\u636e\u540c\u6b65\u4e4b\u540e\uff0c\u4ece\u611f\u77e5\u4e0d\u5230\u4e3b\u4e0a\u65b0\u7684\u6570\u636e\u5199\u5165\uff0c\u4ece\u800c\u4e0d\u80fd\u518d\u4e3b\u52a8\u518d\u6b21\u53d1\u8d77BinlogSync \u6d41\u7a0b\uff0c\u8fd9\u65f6\u5019\u9700\u8981\u8f85\u52a9\u7ebf\u7a0b\u6765\u8c03\u7528TriggerSendBinlogSync\uff0c\u9a71\u52a8BinlogSync\u6d41\u7a0b\u3002TriggerSendBinlogSync\u7684\u4e3b\u8981\u903b\u8f91\u5c31\u662f\u5c06\u65b0\u5199\u5165\u7684\u589e\u91cf\u653e\u5165write_queues\uff0c\u518d\u53d1\u9001\u7ed9\u4ece\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c++",children:"void PikaReplServerConn::HandleBinlogSyncRequest(void* arg) {\n  if (is_first_send) {\n    master_partition->ActivateSlaveBinlogSync(\n        node.ip(), node.port(), range_start);\n    return;\n  }\n  // read next sync binlog to write_queues\n  s = g_pika_rm->UpdateSyncBinlogStatus(slave_node, range_start, range_end);\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"1\uff0c\u4e3b\u6536\u5230\u4ece\u7684BinlogSyncRequest\u540e\uff0c\u5982\u679c\u662f\u7b2c\u4e00\u6b21\u53d1\u9001\uff0c\u5219\u521d\u59cb\u5316\u672c\u5730\u7684\u4e00\u4e9b\u53c2\u6570\u3002"}),"\n",(0,t.jsx)(e.p,{children:"2\uff0c\u4e3b\u628a\u4e0b\u4e00\u6b21\u540c\u6b65\u7684\u6d88\u606f\u653e\u5165write_queues \u4e2d\u3002\u5177\u4f53\u4e3b\u5c06\u54ea\u4e9b\u7684Binlog \u653e\u5165write_queues\uff0c\u53c2\u8003\u589e\u91cf\u540c\u6b65\u6ed1\u52a8\u7a97\u53e3\u8bbe\u8ba1\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c++",children:"void PikaReplClientConn::DispatchBinlogRes(\n    const std::shared_ptr<InnerMessage::InnerResponse> res) {\n   g_pika_rm->ScheduleWriteBinlogTask(\n        table_name_ + partition_id_, res, PikaReplClientConn)); \n}\n\nvoid PikaReplBgWorker::HandleBGWorkerWriteBinlog(void* arg) {\n  for (InnerResponse binlogs) {\n    redis_parser_.ProcessInputBuffer(\n      redis_parser_start, redis_parser_len, &processed_len);\n  }\n  g_pika_rm->SendPartitionBinlogSyncAckRequest(\n      table_name, partition_id, ack_start, ack_end);\n}\n\nint PikaReplBgWorker::HandleWriteBinlog(\n    pink::RedisParser* parser, const pink::RedisCmdArgsType& argv) {\n  c_ptr->Initial(argv, worker->table_name_);\n  partition->ConsensusProcessLeaderLog(c_ptr, worker->binlog_item_);\n}\n\nStatus ConsensusCoordinator::ProcessLeaderLog(\n    std::shared_ptr<Cmd> cmd_ptr, const BinlogItem& attribute) {\n  Status s = InternalAppendLog(attribute, cmd_ptr, nullptr, nullptr);\n  // do g_pika_rm->ScheduleWriteDBTask(); in InternalApplyFollower\n  InternalApplyFollower(\n      MemLog::LogItem(LogOffset(), cmd_ptr, nullptr, nullptr));\n}\n\nvoid PikaReplBgWorker::HandleBGWorkerWriteDB(void* arg) {\n  c_ptr->Do(partition);\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u4ece\u6536\u5230\u4e3b\u53d1\u9001\u7684Binlog\u4fe1\u606f\u4e4b\u540e"}),"\n",(0,t.jsx)(e.p,{children:"1\uff0c\u8c03\u7528DispatchBinlogRes\uff0c\u4e3a\u4fdd\u8bc1\u76f8\u540cpartition\u7684binlog \u5199\u5165\u987a\u5e8f\uff0c\u5c06\u540ctalbe_name\u540cpartition_id\u7684binlog\u5904\u7406\u6d41\u7a0b\u5b89\u6392\u7ed9\u540c\u4e00\u4e2a\u7ebf\u7a0b\u3002"}),"\n",(0,t.jsx)(e.p,{children:"2\uff0cPikaReplBgWorker\u7ebf\u7a0b\u8c03\u7528HandleBGWorkerWriteBinlog\uff0c\u5c06binlog\u653e\u5165redis_parser\u4e2d\uff0credis_parser\u89e3\u6790\u51fa\u5b8c\u6574\u7684\u547d\u4ee4\u540e\u8c03\u7528HandleWriteBinlog\u3002"}),"\n",(0,t.jsx)(e.p,{children:"3\uff0c\u8c03\u7528ConsensusProcessLeaderLog=>ProcessLeaderLog\uff0c\u901a\u8fc7InternalAppendLog \u5199\u5165Binlog\uff0c\u901a\u8fc7InternalApplyFollower\u8c03\u7528\uff0cScheduleWriteDBTask\u3002"}),"\n",(0,t.jsx)(e.p,{children:"4\uff0c\u8fd4\u56de\u6b65\u9aa42\uff0c\u5728\u5199\u5b8cBinlog\u4e4b\u540e\u53d1\u9001BinlogSyncAckRequest\u8fdb\u884c\u4e0b\u4e00\u6b21BinlogSync\u3002"}),"\n",(0,t.jsx)(e.p,{children:"5\uff0c\u5728\u6b65\u9aa43\u4e2d\uff0cScheduleWriteDBTask \u4e4b\u540e\uff0cPikaReplBgWorker\u7ebf\u7a0b\u8c03\u7528HandleBGWorkerWriteDB \u5c06\u6570\u636e\u843d\u76d8\u3002"}),"\n",(0,t.jsx)(e.h3,{id:"\u4e00\u81f4\u6027\u540c\u6b65",children:"\u4e00\u81f4\u6027\u540c\u6b65"}),"\n",(0,t.jsx)(e.p,{children:"\u901a\u8fc7\u4e4b\u524d\u7684\u4ecb\u7ecd\uff0c\u4e3b\u4ece\u4e4b\u95f4\u7684\u540c\u6b65\u4f7f\u7528\u4e86Protobuf\u534f\u8bae\uff0c\u5728\u4f7f\u7528\u4e00\u81f4\u6027\u7248\u672c\u7684pika\u7684\u65f6\u5019\uff0c\u5728Pb\u534f\u8bae\u4e2d\u6dfb\u52a0\u4e86ConsensusMeta\u3002\u901a\u8fc7\u89e3\u6790Pb\u586b\u5145\u7684ConsensusMeta\u7684\u6570\u636e\uff0c\u8fdb\u884c\u4e00\u81f4\u6027\u4e0b\u7684\u4e3b\u4ece\u901a\u4fe1\u3002\u5176Pb\u534f\u8bae\u4e2d\u5b9a\u4e49\u5982\u4e0b\u3002\u5728TrySync\u548cBinlogSync\u7684\u903b\u8f91\u4e2d\u901a\u8fc7\u5224\u65adPb\u62a5\u6587\u4e2d\u662f\u5426\u643a\u5e26ConsensusMeta \u6765\u5224\u65ad\u5bf9\u7aef\u662f\u5426\u5f00\u542f\u4e00\u81f4\u6027\u529f\u80fd\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c++",children:"message ConsensusMeta {\n  optional uint32       term        = 1;\n  // Leader -> Follower prev_log_offset\n  // Follower -> Leader last_log_offset\n  optional BinlogOffset log_offset  = 2;\n  optional BinlogOffset commit      = 3;\n  optional bool         reject      = 4;\n  repeated BinlogOffset hint        = 5;\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u5176\u4e3b\u8981\u8bbe\u8ba1\u89c1\u526f\u672c\u4e00\u81f4\u6027\u8bbe\u8ba1\u6587\u6863\u3002"}),"\n",(0,t.jsx)(e.h3,{id:"\u4ece\u5728\u4e00\u81f4\u6027\u573a\u666f\u4e0b\u7684\u6570\u636e\u5199\u5165",children:"\u4ece\u5728\u4e00\u81f4\u6027\u573a\u666f\u4e0b\u7684\u6570\u636e\u5199\u5165"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c++",children:"void PikaReplBgWorker::HandleBGWorkerWriteBinlog(void* arg) {\n  for (InnerResponse binlogs) {\n    HandleWriteBinlog();\n  }\n  if (res->has_consensus_meta()) {\n    partition->ConsensusProcessLocalUpdate(leader_commit);\n  }\n  ...;\n}\n\nPikaReplBgWorker::HandleWriteBinlog(\n    pink::RedisParser* parser, const pink::RedisCmdArgsType& argv) {\n  c_ptr->Initial(argv, worker->table_name_);\n  partition->ConsensusProcessLeaderLog(c_ptr, worker->binlog_item_);\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"1, \u4e00\u81f4\u6027\u573a\u666f\u4e0b\uff0c\u5728PikaReplBgWorker\u5904\u7406\u4e3b\u540c\u6b65\u8fc7\u6765\u7684Binlog \u540c\u6837\u8c03\u7528\u4e86ConsensusProcessLeaderLog\u63a5\u53e3\uff0c\u5199\u5165Binlog\u3002"}),"\n",(0,t.jsx)(e.p,{children:"2\uff0c\u5728HandleBGWorkerWriteBinlog\u51fd\u6570\u8c03\u7528\u7684\u6700\u540e\uff0c\u8c03\u7528ConsensusProcessLocalUpdate \u63a5\u53e3\uff0c\u66f4\u65b0\u4ece\u7684commit\u4fe1\u606f\uff0c\u8c03\u7528ScheduleApplyFollowerLog \u5c06\u4ece\u53ef\u4ee5\u5199\u5165DB\u7684\u8bf7\u6c42\u5f02\u6b65\u5199\u5165DB\u3002"}),"\n",(0,t.jsx)(e.h3,{id:"\u4e3b\u5728\u4e00\u81f4\u6027\u573a\u666f\u4e0b\u7684\u6570\u636e\u5199\u5165",children:"\u4e3b\u5728\u4e00\u81f4\u6027\u573a\u666f\u4e0b\u7684\u6570\u636e\u5199\u5165"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c++",children:"\n\nvoid PikaReplServerConn::HandleBinlogSyncRequest(void* arg) {\n  s = g_pika_rm->UpdateSyncBinlogStatus(slave_node, range_start, range_end);\n}\n\nStatus ConsensusCoordinator::UpdateSlave(const std::string& ip, int port,\n      const LogOffset& start, const LogOffset& end) {\n  LogOffset committed_index;\n  // invoke InternalCalCommittedIndex to calculate committed_index\n  Status s = sync_pros_.Update(ip, port, start, end, &committed_index);\n  if (!s.ok()) {\n    return s;\n  }\n  LogOffset updated_committed_index;\n  bool need_update = false;\n  {\n    slash::MutexLock l(&index_mu_);\n    need_update = InternalUpdateCommittedIndex(\n        committed_index, &updated_committed_index);\n  }\n  if (need_update) {\n    // sheduel DoExecTask\n    s = ScheduleApplyLog(updated_committed_index);\n    if (!s.ok() && !s.IsNotFound()) {\n      return s;\n    }\n  }\n  return Status::OK();\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"1\uff0cHandleBinlogSyncRequest => UpdateSyncBinlogStatus => ConsensusUpdateSlave => UpdateSlave"}),"\n",(0,t.jsx)(e.p,{children:"2\uff0cUpdateSlave\u51fd\u6570\u4e2d\u8c03\u7528sync_pros.Update\u66f4\u65b0\u5bf9\u5e94\u7684\u4ece\u8282\u70b9\u7684acked_offset\uff0c\u540c\u65f6\u66f4\u65b0\u8fd9\u4e2a\u4ece\u7684match_index\uff0c\u4ee3\u8868\u5df2\u7ecf\u540c\u6b65\u5230\u8be5\u4ece\u7684\u6700\u9ad8\u7684LogOffset\u3002\u7136\u540e\u4f9d\u636ematch_index\u6570\u7ec4\u8ba1\u7b97\u4e3b\u4e0a\u7684committed_index\u3002"}),"\n",(0,t.jsx)(e.p,{children:"3\uff0c\u66f4\u65b0\u4e3b\u7684committed_index\u3002"}),"\n",(0,t.jsx)(e.p,{children:"4\uff0c\u5982\u679c\u6210\u529f\u66f4\u65b0committed_index\uff0c\u8fdb\u800cschedule\u5e94\u7528log\uff0c\u6bcf\u4e00\u6761\u53ef\u4ee5\u5e94\u7528\u7684log\u8c03\u7528\u56de\u8c03DoExecTask\u5b8c\u6210\u5bf9DB\u7684\u5199\u5165\u3002"}),"\n",(0,t.jsx)(e.h2,{id:"reference",children:"Reference"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://github.com/Qihoo360/pika/tree/v3.3.4",children:"https://github.com/Qihoo360/pika/tree/v3.3.4"})})]})}function p(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}},668:(n,e,i)=>{i.d(e,{A:()=>t});const t=i.p+"assets/images/image-1-1ba1cdceb8cda07f155712902543dede.png"},5751:(n,e,i)=>{i.d(e,{A:()=>t});const t=i.p+"assets/images/image-2-ee383d7fe734cbee48e267cf23d436ca.png"},5758:(n,e,i)=>{i.d(e,{A:()=>t});const t=i.p+"assets/images/image-3-70e011578123f4f449d52b38673d5461.png"},8849:(n,e,i)=>{i.d(e,{A:()=>t});const t=i.p+"assets/images/image-4-b9ef1e863901bfa96ea344faee7feaba.png"},6136:(n,e,i)=>{i.d(e,{A:()=>t});const t=i.p+"assets/images/image-5-70e011578123f4f449d52b38673d5461.png"},627:(n,e,i)=>{i.d(e,{A:()=>t});const t=i.p+"assets/images/image-6-b9ef1e863901bfa96ea344faee7feaba.png"},9866:(n,e,i)=>{i.d(e,{A:()=>t});const t=i.p+"assets/images/image-7-d3f5bbc5af764f52853c1b30cfbd7f2b.png"},2854:(n,e,i)=>{i.d(e,{A:()=>t});const t=i.p+"assets/images/image-aad65eec86e42083a83018a4357d882b.png"},8453:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>o});var t=i(6540);const r={},s=t.createContext(r);function a(n){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:a(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);