"use strict";(self.webpackChunkPikiwiDB_Pika_=self.webpackChunkPikiwiDB_Pika_||[]).push([[8184],{6e3:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>_});var r=t(4848),i=t(8453);const s={title:"\u4e3b\u4ece\u540c\u6b65",sidebar_position:5},a=void 0,o={id:"\u8bbe\u8ba1\u4e0e\u5b9e\u73b0/\u4e3b\u4ece\u540c\u6b65/index",title:"\u4e3b\u4ece\u540c\u6b65",description:"pika\u4e3b\u4ece\u540c\u6b65",source:"@site/docs/\u8bbe\u8ba1\u4e0e\u5b9e\u73b0/\u4e3b\u4ece\u540c\u6b65/index.md",sourceDirName:"\u8bbe\u8ba1\u4e0e\u5b9e\u73b0/\u4e3b\u4ece\u540c\u6b65",slug:"/\u8bbe\u8ba1\u4e0e\u5b9e\u73b0/\u4e3b\u4ece\u540c\u6b65/",permalink:"/docs/\u8bbe\u8ba1\u4e0e\u5b9e\u73b0/\u4e3b\u4ece\u540c\u6b65/",draft:!1,unlisted:!1,editUrl:"https://github.com/pikiwidb/website/tree/main/docs/\u8bbe\u8ba1\u4e0e\u5b9e\u73b0/\u4e3b\u4ece\u540c\u6b65/index.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"\u4e3b\u4ece\u540c\u6b65",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"\u589e\u91cf\u540c\u6b65",permalink:"/docs/\u8bbe\u8ba1\u4e0e\u5b9e\u73b0/\u589e\u91cf\u540c\u6b65/"},next:{title:"\u526f\u672c\u4e00\u81f4\u6027",permalink:"/docs/\u8bbe\u8ba1\u4e0e\u5b9e\u73b0/\u526f\u672c\u4e00\u81f4\u6027/"}},l={},_=[{value:"pika\u4e3b\u4ece\u540c\u6b65",id:"pika\u4e3b\u4ece\u540c\u6b65",level:2},{value:"pika\u4e3b\u4ece\u540c\u6b65\u539f\u7406",id:"pika\u4e3b\u4ece\u540c\u6b65\u539f\u7406",level:2},{value:"auxiliary_thread\u7ebf\u7a0b",id:"auxiliary_thread\u7ebf\u7a0b",level:3},{value:"RunSyncSlavePartitionStateMachine-",id:"runsyncslavepartitionstatemachine-",level:4},{value:"CheckSyncTimeout-\u68c0\u67e5\u8fde\u63a5\u7684\u8d85\u65f6\u65f6\u95f4",id:"checksynctimeout-\u68c0\u67e5\u8fde\u63a5\u7684\u8d85\u65f6\u65f6\u95f4",level:4},{value:"TriggerSendBinlogSync-\u751f\u6210\u6bcf\u4e2a\u8282\u70b9\u5f85\u53d1\u9001\u7684\u6570\u636e\u4efb\u52a1",id:"triggersendbinlogsync-\u751f\u6210\u6bcf\u4e2a\u8282\u70b9\u5f85\u53d1\u9001\u7684\u6570\u636e\u4efb\u52a1",level:4},{value:"SendToPeer-\u5c06\u5f85\u53d1\u9001\u7684binlog\u540c\u6b65\u4efb\u52a1\u53d1\u9001\u7ed9\u4ece\u8282\u70b9",id:"sendtopeer-\u5c06\u5f85\u53d1\u9001\u7684binlog\u540c\u6b65\u4efb\u52a1\u53d1\u9001\u7ed9\u4ece\u8282\u70b9",level:4},{value:"pika_repl_client\u548cpika_repl_server_\u7ebf\u7a0b",id:"pika_repl_client\u548cpika_repl_server_\u7ebf\u7a0b",level:3},{value:"pika_repl_client\u5ba2\u6237\u7aef\u8fde\u63a5\u7ba1\u7406\u7ebf\u7a0b",id:"pika_repl_client\u5ba2\u6237\u7aef\u8fde\u63a5\u7ba1\u7406\u7ebf\u7a0b",level:4},{value:"pika_repl_server\u7ebf\u7a0b",id:"pika_repl_server\u7ebf\u7a0b",level:4},{value:"\u4e3b\u4ece\u540c\u6b65\u7684\u6d41\u7a0b",id:"\u4e3b\u4ece\u540c\u6b65\u7684\u6d41\u7a0b",level:3},{value:"\u603b\u7ed3",id:"\u603b\u7ed3",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"pika\u4e3b\u4ece\u540c\u6b65",children:"pika\u4e3b\u4ece\u540c\u6b65"}),"\n",(0,r.jsx)(n.p,{children:"\u4e3b\u8981\u4e3a\u4e86\u5206\u6790\u63a2\u7d22\u4e00\u4e0bpika\u662f\u5982\u4f55\u5b9e\u73b0\u4e3b\u4ece\u540c\u6b65\u7684\uff0cpika\u7684\u4e3b\u4ece\u540c\u6b65\u7684\u539f\u7406\u4e0eredis\u7684\u540c\u6b65\u65b9\u6848\u8fd8\u4e0d\u76f8\u540c\uff0c\u672c\u6587\u4e3b\u8981\u662f\u4e3a\u4e86\u5206\u6790\u5176\u4e3b\u4ece\u540c\u6b65\u7684\u76f8\u5173\u6d41\u7a0b\uff08pika\u57fa\u4e8e3.4\u7248\u672c\uff09\u3002"}),"\n",(0,r.jsx)(n.h2,{id:"pika\u4e3b\u4ece\u540c\u6b65\u539f\u7406",children:"pika\u4e3b\u4ece\u540c\u6b65\u539f\u7406"}),"\n",(0,r.jsx)(n.p,{children:"\u4e3b\u4ece\u540c\u6b65\u7684\u539f\u7406\uff0c\u4e3b\u8981\u662f\u901a\u8fc7\u5728\u542f\u52a8\u7684\u65f6\u5019\u542f\u52a8\u4e86\u4e24\u90e8\u5206\u7684\u7ebf\u7a0b\u6765\u8fdb\u884c\u7684\u3002"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"auxiliary_thread\u7ebf\u7a0b"}),"\n",(0,r.jsx)(n.li,{children:"pika_rm\u4e2d\u7684pika_repl_client\u7ebf\u7a0b\u6c60\u548cpika_repl_server\u7ebf\u7a0b\u6c60"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u5148\u9010\u4e2a\u5206\u6790\u4e00\u4e0b\u4e24\u4e2a\u90e8\u5206\u7ebf\u7a0b\u7684\u5de5\u4f5c\u7684\u6d41\u7a0b\u3002"}),"\n",(0,r.jsx)(n.h3,{id:"auxiliary_thread\u7ebf\u7a0b",children:"auxiliary_thread\u7ebf\u7a0b"}),"\n",(0,r.jsx)(n.p,{children:"\u5728pika\u7684pika_server\u7684Start\u51fd\u6570\u4e2d\u542f\u52a8\u4e86auxiliary_thread\u7ebf\u7a0b\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c++",children:'  ret = pika_auxiliary_thread_->StartThread();\n  if (ret != pink::kSuccess) {\n    tables_.clear();\n    LOG(FATAL) << "Start Auxiliary Thread Error: " << ret << (ret == pink::kCreateThreadError ? ": create thread error " : ": other error");\n  }\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u6b64\u65f6\u542f\u52a8\u7684\u7ebf\u7a0b\u5c31\u662f\u4f4d\u4e8epika_auxiliary_thread.cc\u4e2d\u7684\u7ebf\u7a0b\u51fd\u6570\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c++",children:'void* PikaAuxiliaryThread::ThreadMain() {\n  while (!should_stop()) {            //  \u662f\u5426\u505c\u6b62\u7ebf\u7a0b\n    if (g_pika_conf->classic_mode()) {    // \u5224\u65ad\u5f53\u524d\u8fd0\u884c\u7684\u6a21\u5f0f\u662f\u5206\u5e03\u5f0f\u6a21\u5f0f\u8fd8\u662f\u7ecf\u5178\u6a21\u5f0f\n      if (g_pika_server->ShouldMetaSync()) {\n        g_pika_rm->SendMetaSyncRequest();\n      } else if (g_pika_server->MetaSyncDone()) {\n        g_pika_rm->RunSyncSlavePartitionStateMachine();\n      }\n    } else {\n      g_pika_rm->RunSyncSlavePartitionStateMachine();  // \u5206\u5e03\u5f0f\u6a21\u5f0f\u5219\u76f4\u63a5\u542f\u52a8\u72b6\u6001\u673a\u7684\u540c\u6b65\n    }\n\n    Status s = g_pika_rm->CheckSyncTimeout(slash::NowMicros());  // \u68c0\u67e5\u8d85\u65f6\u7684\u8282\u70b9\n    if (!s.ok()) {\n      LOG(WARNING) << s.ToString();\n    }\n\n    // TODO(whoiami) timeout\n    s = g_pika_server->TriggerSendBinlogSync();     // \u89e6\u53d1binlog\u7684\u4e3b\u4ece\u540c\u6b65\n    if (!s.ok()) {\n      LOG(WARNING) << s.ToString();\n    }\n    // send to peer\n    int res = g_pika_server->SendToPeer();   // \u5c06\u5f85\u53d1\u9001\u7684\u4efb\u52a1\u52a0\u5165\u5230\u5de5\u4f5c\u7ebf\u7a0b\u961f\u5217\u4e2d\n    if (!res) {\n      // sleep 100 ms\n      mu_.Lock();\n      cv_.TimedWait(100);\n      mu_.Unlock();\n    } else {\n      //LOG_EVERY_N(INFO, 1000) << "Consume binlog number " << res;\n    }\n  }\n  return NULL;\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"runsyncslavepartitionstatemachine-",children:"RunSyncSlavePartitionStateMachine-"}),"\n",(0,r.jsx)(n.p,{children:"\u8be5\u51fd\u6570\u5c31\u662f\u5904\u7406\u4e3b\u4ece\u540c\u6b65\u8fc7\u7a0b\u4e2d\u7684\u72b6\u6001\u673a\uff0c\u6839\u636e\u4e0d\u540c\u7684\u72b6\u6001\u53bb\u8fdb\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c++",children:'Status PikaReplicaManager::RunSyncSlavePartitionStateMachine() {\n  slash::RWLock l(&partitions_rw_, false);\n  for (const auto& item : sync_slave_partitions_) {   // \u83b7\u53d6\u6240\u6709\u7684\u4ece\u8282\u70b9\u540c\u6b65\u4fe1\u606f\n    PartitionInfo p_info = item.first;\n    std::shared_ptr<SyncSlavePartition> s_partition = item.second;\n    if (s_partition->State() == ReplState::kTryConnect) {   // \u5982\u679c\u540c\u6b65\u7684\u4fe1\u606f\u662fkTryConnect\u5219\u53d1\u9001TrySync\u7684\u540c\u6b65\u8bf7\u6c42\n      LOG(WARNING) << "Partition start, Table Name: "\n          << p_info.table_name_ << " Partition Id: " << p_info.partition_id_;\n      SendPartitionTrySyncRequest(p_info.table_name_, p_info.partition_id_);\n    } else if (s_partition->State() == ReplState::kTryDBSync) {  // \u5982\u679c\u662fkTryDB\u7684\u72b6\u6001\u5219\u53d1\u9001DB\u540c\u6b65\u7684\u8bf7\u6c42\n      SendPartitionDBSyncRequest(p_info.table_name_, p_info.partition_id_);\n    } else if (s_partition->State() == ReplState::kWaitReply) {  // \u5982\u679c\u662fwait\u72b6\u6001\u5219\u4ec0\u4e48\u90fd\u4e0d\u505a\n      continue;\n    } else if (s_partition->State() == ReplState::kWaitDBSync) {  // \u5982\u679c\u662fwaitdb\u72b6\u6001\u5219\u7b49\u5f85\n      std::shared_ptr<Partition> partition =\n          g_pika_server->GetTablePartitionById(\n                  p_info.table_name_, p_info.partition_id_);\n      if (partition) {\n        partition->TryUpdateMasterOffset();   // \u66f4\u65b0\u548c\u4e3b\u4e4b\u95f4\u7684offset\n      } else {\n        LOG(WARNING) << "Partition not found, Table Name: "\n          << p_info.table_name_ << " Partition Id: " << p_info.partition_id_;\n      }\n    } else if (s_partition->State() == ReplState::kConnected\n      || s_partition->State() == ReplState::kNoConnect\n      || s_partition->State() == ReplState::kDBNoConnect) {  // \u5982\u679c\u662f\u5df2\u8fde\u63a5\u6216\u8005\u5931\u8054\u5219\u4ec0\u4e48\u90fd\u4e0d\u5904\u7406\n      continue;\n    }\n  }\n  return Status::OK();\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u4ece\u72b6\u6001\u673a\u7684\u8fd0\u884c\u6765\u770b\uff0c\u6240\u6709\u7684\u6b65\u9aa4\u90fd\u662f\u4f9d\u8d56\u4e8e\u8be5\u51fd\u6570\u901a\u8fc7\u72b6\u6001\u6765\u9a71\u52a8\u8fdb\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\u3002"}),"\n",(0,r.jsx)(n.h4,{id:"checksynctimeout-\u68c0\u67e5\u8fde\u63a5\u7684\u8d85\u65f6\u65f6\u95f4",children:"CheckSyncTimeout-\u68c0\u67e5\u8fde\u63a5\u7684\u8d85\u65f6\u65f6\u95f4"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c++",children:'Status PikaReplicaManager::CheckSyncTimeout(uint64_t now) {\n  slash::RWLock l(&partitions_rw_, false);\n\n  for (auto& iter : sync_master_partitions_) {\n    std::shared_ptr<SyncMasterPartition> partition = iter.second;\n    Status s = partition->CheckSyncTimeout(now);  // \u83b7\u53d6\u6240\u6709\u7684master\u7684\u540c\u6b65\u8282\u70b9\u68c0\u67e5\u662f\u5426\u8d85\u65f6\n    if (!s.ok()) {\n      LOG(WARNING) << "CheckSyncTimeout Failed " << s.ToString();\n    }\n  }\n  for (auto& iter : sync_slave_partitions_) {\n    std::shared_ptr<SyncSlavePartition> partition = iter.second;\n    Status s = partition->CheckSyncTimeout(now);  // \u83b7\u53d6\u6240\u6709slave\u7684\u540c\u6b65\u8282\u70b9\u4fe1\u606f\u68c0\u67e5\u662f\u5426\u8d85\u65f6\n    if (!s.ok()) {\n      LOG(WARNING) << "CheckSyncTimeout Failed " << s.ToString();\n    }\n  }\n  return Status::OK();\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u4e3b\u8981\u662f\u68c0\u67e5master\u548cslave\u7684\u540c\u6b65\u8fde\u63a5\u4fe1\u606f\u662f\u5426\u8d85\u65f6\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c++",children:'Status SyncMasterPartition::CheckSyncTimeout(uint64_t now) {\n  std::unordered_map<std::string, std::shared_ptr<SlaveNode>> slaves = GetAllSlaveNodes();\n\n  std::vector<Node> to_del;\n  for (auto& slave_iter : slaves) {\n    std::shared_ptr<SlaveNode> slave_ptr = slave_iter.second;   // \u83b7\u53d6\u6240\u6709slave\u7684\u8fde\u63a5\u4fe1\u606f\n    slash::MutexLock l(&slave_ptr->slave_mu);\n    if (slave_ptr->LastRecvTime() + kRecvKeepAliveTimeout < now) {  // \u5982\u679c\u6700\u540e\u7684\u65f6\u95f4\u8d85\u65f6\u5219\u5220\u9664\u8be5\u8fde\u63a5\n      to_del.push_back(Node(slave_ptr->Ip(), slave_ptr->Port()));\n    } else if (slave_ptr->LastSendTime() + kSendKeepAliveTimeout < now && slave_ptr->sent_offset == slave_ptr->acked_offset) {  // \u5982\u679c\u6700\u540e\u7684\u53d1\u9001\u65f6\u95f4\u672a\u8d85\u65f6 \u5e76\u4e14\u4e3b\u4ece\u540c\u6b65\u7684\u504f\u79fb\u91cf\u53d1\u9001\u7684\u4e0e\u56de\u590d\u7684\u76f8\u540c\u5219\u53d1\u9001binlogchips\u8bf7\u6c42\u5e76\u4e14\u66f4\u65b0\u5f53\u524d\u7684\u6700\u540e\u53d1\u9001\u65f6\u95f4\n      std::vector<WriteTask> task;\n      RmNode rm_node(slave_ptr->Ip(), slave_ptr->Port(), slave_ptr->TableName(), slave_ptr->PartitionId(), slave_ptr->SessionId());\n      WriteTask empty_task(rm_node, BinlogChip(LogOffset(), ""), LogOffset());\n      task.push_back(empty_task);\n      Status s = g_pika_rm->SendSlaveBinlogChipsRequest(slave_ptr->Ip(), slave_ptr->Port(), task);    // \u540c\u6b65\u5f53\u524d\u7684\u4e3b\u4ece\u540c\u6b65\u7684\u4fe1\u606f\n      slave_ptr->SetLastSendTime(now);\n      if (!s.ok()) {\n        LOG(INFO)<< "Send ping failed: " << s.ToString();\n        return Status::Corruption("Send ping failed: " + slave_ptr->Ip() + ":" + std::to_string(slave_ptr->Port()));\n      }\n    }\n  }\n\n  for (auto& node : to_del) {  // \u5c06\u8d85\u65f6\u7684\u8fde\u63a5\u4fe1\u606f\u90fd\u5220\u9664\u6389\n    coordinator_.SyncPros().RemoveSlaveNode(node.Ip(), node.Port());\n    g_pika_rm->DropItemInWriteQueue(node.Ip(), node.Port());\n    LOG(WARNING) << SyncPartitionInfo().ToString() << " Master del Recv Timeout slave success " << node.ToString();\n  }\n  return Status::OK();\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u4e3b\u8282\u70b9\u4e3b\u8981\u7ef4\u62a4\u4e86\u5f53\u524d\u7684\u4e00\u4e9b\u4e3b\u4ece\u8fde\u63a5\u7684\u4fe1\u606f\u7ef4\u62a4\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c++",children:"Status SyncSlavePartition::CheckSyncTimeout(uint64_t now) {\n  slash::MutexLock l(&partition_mu_);\n  // no need to do session keepalive return ok\n  if (repl_state_ != ReplState::kWaitDBSync && repl_state_ != ReplState::kConnected) {\n    return Status::OK();  // \u5982\u679c\u4ece\u8282\u70b9\u7684\u4fe1\u606f\u4e0d\u662fwaitdb\u6216\u8005\u8fde\u63a5\u72b6\u6001\u5219\u8fd4\u56deok\n  }\n  if (m_info_.LastRecvTime() + kRecvKeepAliveTimeout < now) {\n    // update slave state to kTryConnect, and try reconnect to master node\n    repl_state_ = ReplState::kTryConnect;\n    g_pika_server->SetLoopPartitionStateMachine(true);  // \u5426\u5219\u5c31\u8bbe\u7f6e\u6210tryconnect\u72b6\u6001\u53bb\u5c1d\u8bd5\u8fde\u63a5\u4e3b\u8282\u70b9\n  }\n  return Status::OK();\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"triggersendbinlogsync-\u751f\u6210\u6bcf\u4e2a\u8282\u70b9\u5f85\u53d1\u9001\u7684\u6570\u636e\u4efb\u52a1",children:"TriggerSendBinlogSync-\u751f\u6210\u6bcf\u4e2a\u8282\u70b9\u5f85\u53d1\u9001\u7684\u6570\u636e\u4efb\u52a1"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c++",children:"Status PikaServer::TriggerSendBinlogSync() {\n  return g_pika_rm->WakeUpBinlogSync();\n}\n\n...\n\nStatus PikaReplicaManager::WakeUpBinlogSync() {\n  slash::RWLock l(&partitions_rw_, false);\n  for (auto& iter : sync_master_partitions_) {\n    std::shared_ptr<SyncMasterPartition> partition = iter.second;\n    Status s = partition->WakeUpSlaveBinlogSync(); // \u68c0\u67e5\u6bcf\u4e2a\u8282\u70b9\u662f\u5426\u9700\u8981\u751f\u6210binlog\u540c\u6b65\u4efb\u52a1\n    if (!s.ok()) {\n      return s;\n    }\n  }\n  return Status::OK();\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u4e3b\u8981\u662f\u68c0\u67e5\u6bcf\u4e2a\u8fde\u63a5\u7684\u4ece\u8282\u70b9\u4fe1\u606f\u662f\u5426\u9700\u8981\u751f\u6210\u540c\u6b65binlog\u4efb\u52a1\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c++",children:'Status SyncMasterPartition::WakeUpSlaveBinlogSync() {\n  std::unordered_map<std::string, std::shared_ptr<SlaveNode>> slaves = GetAllSlaveNodes();\n  std::vector<std::shared_ptr<SlaveNode>> to_del;\n  for (auto& slave_iter : slaves) {\n    std::shared_ptr<SlaveNode> slave_ptr = slave_iter.second;\n    slash::MutexLock l(&slave_ptr->slave_mu);\n    if (slave_ptr->sent_offset == slave_ptr->acked_offset) {  // \u68c0\u67e5\u5f53\u524d\u540c\u6b65\u7684\u6570\u636e\u4fe1\u606f\u662f\u5426\u8ddf\u56de\u590d\u7684\u6570\u636e\u504f\u79fb\u76f8\u540c\n      Status s = ReadBinlogFileToWq(slave_ptr);  // \u5199binlog\u4efb\u52a1\u5230\u8be5\u4ece\u8282\u70b9\u8fde\u63a5\u4e0a\u9762\n      if (!s.ok()) {\n        to_del.push_back(slave_ptr);\n        LOG(WARNING) << "WakeUpSlaveBinlogSync falied, Delete from RM, slave: " <<\n          slave_ptr->ToStringStatus() << " " << s.ToString();\n      }\n    }\n  }\n  for (auto& to_del_slave : to_del) {  // \u5982\u679c\u540c\u6b65\u5931\u8d25\u5219\u5220\u9664\u8be5node\n    RemoveSlaveNode(to_del_slave->Ip(), to_del_slave->Port());\n  }\n  return Status::OK();\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u5176\u4e2dReadBinlogFileToWq\u5c31\u662f\u6839\u636e\u5f53\u524d\u7684\u8fde\u63a5\u6765\u751f\u6210binlog\u540c\u6b65\u4efb\u52a1\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c++",children:'Status SyncMasterPartition::ReadBinlogFileToWq(const std::shared_ptr<SlaveNode>& slave_ptr) {\n  int cnt = slave_ptr->sync_win.Remaining();\n  std::shared_ptr<PikaBinlogReader> reader = slave_ptr->binlog_reader;  //\u83b7\u53d6\u5f53\u524dbinlogreader\n  if (reader == nullptr) {\n    return Status::OK();\n  }\n  std::vector<WriteTask> tasks;\n  for (int i = 0; i < cnt; ++i) {\n    std::string msg;\n    uint32_t filenum;\n    uint64_t offset;\n    if (slave_ptr->sync_win.GetTotalBinlogSize() > PIKA_MAX_CONN_RBUF_HB * 2) {\n      LOG(INFO) << slave_ptr->ToString() << " total binlog size in sync window is :"\n                << slave_ptr->sync_win.GetTotalBinlogSize();\n      break;  //\u68c0\u67e5\u5f53\u524d\u540c\u6b65\u7a97\u53e3\u7684\u5927\u5c0f\n    }\n    Status s = reader->Get(&msg, &filenum, &offset);  //\u83b7\u53d6\u5bf9\u5e94\u7684\u504f\u79fb\u6570\u636e\n    if (s.IsEndFile()) {\n      break;\n    } else if (s.IsCorruption() || s.IsIOError()) {\n      LOG(WARNING) << SyncPartitionInfo().ToString()\n        << " Read Binlog error : " << s.ToString();\n      return s;\n    }\n    BinlogItem item;\n    if (!PikaBinlogTransverter::BinlogItemWithoutContentDecode(\n          TypeFirst, msg, &item)) {\n      LOG(WARNING) << "Binlog item decode failed";\n      return Status::Corruption("Binlog item decode failed");\n    }\n    BinlogOffset sent_b_offset = BinlogOffset(filenum, offset);   // \u751f\u6210\u53d1\u9001\u7684\u504f\u79fb\u91cf\n    LogicOffset sent_l_offset = LogicOffset(item.term_id(), item.logic_id());\n    LogOffset sent_offset(sent_b_offset, sent_l_offset);\n\n    slave_ptr->sync_win.Push(SyncWinItem(sent_offset, msg.size()));  //\u8bbe\u7f6e\u540c\u6b65\u7a97\u53e3\u7684\u5927\u5c0f\n    slave_ptr->SetLastSendTime(slash::NowMicros());   //\u8bbe\u7f6e\u6700\u540e\u7684\u53d1\u9001\u65f6\u95f4\n    RmNode rm_node(slave_ptr->Ip(), slave_ptr->Port(), slave_ptr->TableName(), slave_ptr->PartitionId(), slave_ptr->SessionId());\n    WriteTask task(rm_node, BinlogChip(sent_offset, msg), slave_ptr->sent_offset);\n    tasks.push_back(task);  // \u5305\u88c5\u6210\u4efb\u52a1\n    slave_ptr->sent_offset = sent_offset;  // \u8bbe\u7f6e\u5f53\u524d\u7684\u53d1\u9001\u504f\u79fb\u91cf\n  }\n\n  if (!tasks.empty()) {\n    g_pika_rm->ProduceWriteQueue(slave_ptr->Ip(), slave_ptr->Port(), partition_info_.partition_id_, tasks);  // \u5c06\u4efb\u52a1\u653e\u5165\u961f\u5217\u4e2d\u7b49\u5f85\u5904\u7406\n  }\n  return Status::OK();\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u4e3b\u8981\u5c31\u662f\u901a\u8fc7\u83b7\u53d6\u504f\u79fb\u91cf\uff0c\u7136\u540e\u751f\u6210\u4efb\u52a1\u5e76\u653e\u5165\u53d1\u9001\u961f\u5217\u4e2d\u7b49\u5f85\u5904\u7406\u3002"}),"\n",(0,r.jsx)(n.h4,{id:"sendtopeer-\u5c06\u5f85\u53d1\u9001\u7684binlog\u540c\u6b65\u4efb\u52a1\u53d1\u9001\u7ed9\u4ece\u8282\u70b9",children:"SendToPeer-\u5c06\u5f85\u53d1\u9001\u7684binlog\u540c\u6b65\u4efb\u52a1\u53d1\u9001\u7ed9\u4ece\u8282\u70b9"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c++",children:'int PikaServer::SendToPeer() {\n  return g_pika_rm->ConsumeWriteQueue();\n}\n\n...\n  \nint PikaReplicaManager::ConsumeWriteQueue() {\n  std::unordered_map<std::string, std::vector<std::vector<WriteTask>>> to_send_map;\n  int counter = 0;\n  {\n    slash::MutexLock l(&write_queue_mu_);\n    for (auto& iter : write_queues_) {\n      const std::string& ip_port = iter.first;\n      std::unordered_map<uint32_t, std::queue<WriteTask>>& p_map = iter.second; //\u83b7\u53d6\u961f\u5217\n      for (auto& partition_queue : p_map) {\n        std::queue<WriteTask>& queue = partition_queue.second;\n        for (int i = 0; i < kBinlogSendPacketNum; ++i) {\n          if (queue.empty()) {\n            break;\n          }\n          size_t batch_index = queue.size() > kBinlogSendBatchNum ? kBinlogSendBatchNum : queue.size();   // \u68c0\u67e5\u5f53\u524d\u53ef\u53d1\u9001\u7684\u5927\u5c0f\n          std::vector<WriteTask> to_send;\n          int batch_size = 0;\n          for (size_t i = 0; i < batch_index; ++i) {\n            WriteTask& task = queue.front();\n            batch_size +=  task.binlog_chip_.binlog_.size();\n            // make sure SerializeToString will not over 2G\n            if (batch_size > PIKA_MAX_CONN_RBUF_HB) {\n              break;\n            }\n            to_send.push_back(task);  // \u653e\u5165\u53ef\u53d1\u9001\u7684\u961f\u5217\u4e2d\n            queue.pop();\n            counter++;\n          }\n          if (!to_send.empty()) {\n            to_send_map[ip_port].push_back(std::move(to_send));\n          }\n        }\n      }\n    }\n  }\n\n  std::vector<std::string> to_delete;\n  for (auto& iter : to_send_map) {\n    std::string ip;\n    int port = 0;\n    if (!slash::ParseIpPortString(iter.first, ip, port)) {\n      LOG(WARNING) << "Parse ip_port error " << iter.first;\n      continue;\n    }\n    for (auto& to_send : iter.second) {\n      Status s = pika_repl_server_->SendSlaveBinlogChips(ip, port, to_send); // \u53d1\u9001Binglog\u4efb\u52a1\n      if (!s.ok()) {\n        LOG(WARNING) << "send binlog to " << ip << ":" << port << " failed, " << s.ToString();\n        to_delete.push_back(iter.first);  // \u5982\u679c\u53d1\u9001\u5931\u8d25\u5219\u653e\u5165\u5931\u8d25\u961f\u5217\u4e2d\n        continue;\n      }\n    }\n  }\n\n  if (!to_delete.empty()) {\n    {\n      slash::MutexLock l(&write_queue_mu_);\n      for (auto& del_queue : to_delete) {\n        write_queues_.erase(del_queue);  //\u5220\u9664\u53d1\u9001\u5931\u8d25\u7684\u4efb\u52a1\n      }\n    }\n  }\n  return counter;\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["\u6700\u7ec8\u901a\u8fc7pika_repl_server_\u7684SendSlaveBinlogChip",(0,r.jsx)(n.a,{href:"https://so.csdn.net/so/search?q=s%E5%87%BD%E6%95%B0&spm=1001.2101.3001.7020",children:"s\u51fd\u6570"}),"\u5c06\u5f53\u524d\u5f85\u53d1\u9001\u7684\u4efb\u52a1\u53d1\u9001\u51fa\u53bb\u3002"]}),"\n",(0,r.jsx)(n.h3,{id:"pika_repl_client\u548cpika_repl_server_\u7ebf\u7a0b",children:"pika_repl_client\u548cpika_repl_server_\u7ebf\u7a0b"}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u4e24\u4e2a\u7ebf\u7a0b\u5c31\u662f\u7ef4\u62a4\u4e86\u4e3b\u4ece\u8fde\u63a5\u7684client\u548cserver\u7aef\u7684\u4ea4\u4e92\u529f\u80fd\uff0cauxiliary_thread\u4e2d\u72b6\u6001\u673a\u89e6\u53d1\u7684\u8fde\u63a5\u72b6\u6001\u5c31\u662f\u4f9d\u8d56\u4e8e\u8fd9\u4e24\u4e2a\u7ebf\u7a0b\u6765\u5b8c\u6210\u4ea4\u4e92\u3002"}),"\n",(0,r.jsx)(n.h4,{id:"pika_repl_client\u5ba2\u6237\u7aef\u8fde\u63a5\u7ba1\u7406\u7ebf\u7a0b",children:"pika_repl_client\u5ba2\u6237\u7aef\u8fde\u63a5\u7ba1\u7406\u7ebf\u7a0b"}),"\n",(0,r.jsx)(n.p,{children:"pika_reple_client\u7684\u6700\u6838\u5fc3\u7684\u539f\u7406\u5c31\u662f\u901a\u8fc7\u4e00\u4e2a\u57fa\u4e8eepoll\uff08linux\u5e73\u53f0\uff09\u7684\u4e8b\u4ef6\u9a71\u52a8\uff0c\u53bb\u5b8c\u6210\u591a\u4e2a\u8fde\u63a5\u7684\u4e8b\u4ef6\u9a71\u52a8\uff0c\u5e76\u901a\u8fc7\u52a0\u5165\u7ebf\u7a0b\u6c60\u6765\u63d0\u4f9bepoll\u7684\u5904\u7406\u6027\u80fd\u3002\u63a5\u4e0b\u6765\u5c31\u5927\u81f4\u4e86\u89e3\u4e00\u4e0bpika_repl_client\u5b8c\u6210\u7684\u4ea4\u4e92\u7684\u76f8\u5173\u529f\u80fd\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u5728\u4e3b\u4ece\u540c\u6b65\u8fc7\u7a0b\u4e2d\uff0c\u65e0\u8bba\u662fpika_repl_client\u8fd8\u662fpika_repl_server_\u5e95\u5c42\u90fd\u5229\u7528\u4e86pink\u5e93\u7684PbConn\u6a21\u5f0f\u6765\u8fdb\u884c\u7684\u6570\u636e\u4ea4\u4e92\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u901a\u8fc7client_thread\u7684\u903b\u8f91\u6d41\u7a0b\u6765\u7b80\u5355\u5206\u6790\u4e00\u4e0bPbConn\u7684\u6267\u884c\u6d41\u7a0b\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u5728PikaReplClient\u7684Start\u6d41\u7a0b\u4e2d\uff0c\u542f\u52a8\u4e86\u5982\u4e0b\u7ebf\u7a0b\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c++",children:'int PikaReplClient::Start() {\n  int res = client_thread_->StartThread();   // \u542f\u52a8\u4e00\u4e2aepoll\u7684\u4e8b\u4ef6\u9a71\u52a8\n  if (res != pink::kSuccess) {\n    LOG(FATAL) << "Start ReplClient ClientThread Error: " << res << (res == pink::kCreateThreadError ? ": create thread error " : ": other error");\n  }\n  for (size_t i = 0; i < bg_workers_.size(); ++i) {  // \u901a\u8fc7\u5c06epoll\u4e8b\u4ef6\u9a71\u52a8\u7684\u6267\u884c\u5206\u53d1\u5230\u7ebf\u7a0b\u6c60\u4e2d\u6267\u884c\n    res = bg_workers_[i]->StartThread();\n    if (res != pink::kSuccess) {\n      LOG(FATAL) << "Start Pika Repl Worker Thread Error: " << res\n        << (res == pink::kCreateThreadError ? ": create thread error " : ": other error");\n    }\n  }\n  return res;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u6b64\u65f6client_thread\u542f\u52a8\u7684\u5c31\u662f\u4f4d\u4e8epink\u7684client_thread.c\u4e2d\u7684ClientThread\u7ebf\u7a0b\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c++",children:'void *ClientThread::ThreadMain() {\n  int nfds = 0;\n  PinkFiredEvent *pfe = NULL;\n\n  struct timeval when;\n  gettimeofday(&when, NULL);\n  struct timeval now = when;\n\n  when.tv_sec += (cron_interval_ / 1000);\n  when.tv_usec += ((cron_interval_ % 1000) * 1000);\n  int timeout = cron_interval_;\n  if (timeout <= 0) {\n    timeout = PINK_CRON_INTERVAL;\n  }\n\n  std::string ip_port;\n\n  while (!should_stop()) {\n    if (cron_interval_ > 0) {\n      gettimeofday(&now, nullptr);\n      if (when.tv_sec > now.tv_sec ||\n          (when.tv_sec == now.tv_sec && when.tv_usec > now.tv_usec)) {\n        timeout = (when.tv_sec - now.tv_sec) * 1000 +\n          (when.tv_usec - now.tv_usec) / 1000;\n      } else {\n        // do user defined cron\n        handle_->CronHandle();   // \u6267\u884c\u5b9a\u65f6\u4efb\u52a1\n\n        DoCronTask();\n        when.tv_sec = now.tv_sec + (cron_interval_ / 1000);\n        when.tv_usec = now.tv_usec + ((cron_interval_ % 1000) * 1000);\n        timeout = cron_interval_;\n      }\n    }\n    //{\n    //InternalDebugPrint();\n    //}\n    nfds = pink_epoll_->PinkPoll(timeout);  //\u4e8b\u4ef6\u9a71\u52a8\n    for (int i = 0; i < nfds; i++) {\n      pfe = (pink_epoll_->firedevent()) + i;\n      if (pfe == NULL) {\n        continue;\n      }\n\n      if (pfe->fd == pink_epoll_->notify_receive_fd()) {  // \u5904\u7406\u9a71\u52a8\n        ProcessNotifyEvents(pfe);\n        continue;\n      }\n\n      int should_close = 0;\n      std::map<int, std::shared_ptr<PinkConn>>::iterator iter = fd_conns_.find(pfe->fd);\n      if (iter == fd_conns_.end()) {\n        log_info("fd %d not found in fd_conns\\n", pfe->fd);\n        pink_epoll_->PinkDelEvent(pfe->fd);\n        continue;\n      }\n\n      std::shared_ptr<PinkConn> conn = iter->second;\n\n      if (connecting_fds_.count(pfe->fd)) {\n        Status s = ProcessConnectStatus(pfe, &should_close);\n        if (!s.ok()) {\n          handle_->DestConnectFailedHandle(conn->ip_port(), s.ToString());\n        }\n        connecting_fds_.erase(pfe->fd);\n      }\n\n      if (!should_close && (pfe->mask & EPOLLOUT) && conn->is_reply()) {\n        WriteStatus write_status = conn->SendReply();   // \u5982\u679c\u5f53\u524d\u662f\u53ef\u4ee5\u5199\u6570\u636e\u5219\u8c03\u7528SendReply\n        conn->set_last_interaction(now);\n        if (write_status == kWriteAll) {\n          pink_epoll_->PinkModEvent(pfe->fd, 0, EPOLLIN);\n          conn->set_is_reply(false);\n        } else if (write_status == kWriteHalf) {\n          continue;\n        } else {\n          log_info("send reply error %d\\n", write_status);\n          should_close = 1;\n        }\n      }\n\n      if (!should_close && (pfe->mask & EPOLLIN)) {\n        ReadStatus read_status = conn->GetRequest();  // \u5982\u679c\u662f\u63a5\u53d7\u6570\u636e\u5219\u8c03\u7528GetRequest\u6765\u89e3\u6790\n        conn->set_last_interaction(now);\n        if (read_status == kReadAll) {\n          // pink_epoll_->PinkModEvent(pfe->fd, 0, EPOLLOUT);\n        } else if (read_status == kReadHalf) {\n          continue;\n        } else {\n          log_info("Get request error %d\\n", read_status);\n          should_close = 1;\n        }\n      }\n\n      if ((pfe->mask & EPOLLERR) || (pfe->mask & EPOLLHUP) || should_close) {\n        {\n          log_info("close connection %d reason %d %d\\n", pfe->fd, pfe->mask, should_close);\n          pink_epoll_->PinkDelEvent(pfe->fd);  // \u5982\u679c\u5173\u95ed\u5219\u5220\u9664\u8be5\u4e8b\u4ef6\n          CloseFd(conn);\n          fd_conns_.erase(pfe->fd);\n          if (ipport_conns_.count(conn->ip_port())) {\n            ipport_conns_.erase(conn->ip_port());\n          }\n          if (connecting_fds_.count(conn->fd())) {\n            connecting_fds_.erase(conn->fd());\n          }\n        }\n      }\n    }\n  }\n  return nullptr;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u901a\u8fc7client_thread\u7684\u6267\u884c\u51fd\u6570\u53ef\u77e5\uff0c\u8fd9\u662f\u4e00\u4e2a\u6807\u51c6\u7684\u4e8b\u4ef6\u9a71\u52a8\u6a21\u578b\u3002\u5982\u679c\u53ef\u5199\u5165\u5219\u8c03\u7528conn\u7684SendReply\u51fd\u6570\uff0c\u5982\u679c\u662f\u63a5\u53d7\u4e8b\u60c5\u5219\u8c03\u7528conn\u7684GetRequest\u51fd\u6570\u3002\u6b64\u65f6\u7684conn\u5c31\u662fPbConn\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c++",children:'// Msg is [ length(COMMAND_HEADER_LENGTH) | body(length bytes) ]\n//   step 1. kHeader, we read COMMAND_HEADER_LENGTH bytes;\n//   step 2. kPacket, we read header_len bytes;\nReadStatus PbConn::GetRequest() {\n  while (true) {\n    switch (connStatus_) {\n      case kHeader: {\n        ssize_t nread = read(\n            fd(), rbuf_ + cur_pos_, COMMAND_HEADER_LENGTH - cur_pos_); // \u89e3\u6790\u5934\u90e8\u4fe1\u606f\n        if (nread == -1) {\n          if (errno == EAGAIN) {\n            return kReadHalf;\n          } else {\n            return kReadError;\n          }\n        } else if (nread == 0) {\n          return kReadClose;\n        } else {\n          cur_pos_ += nread;\n          if (cur_pos_ == COMMAND_HEADER_LENGTH) {\n            uint32_t integer = 0;\n            memcpy(reinterpret_cast<char*>(&integer),\n                   rbuf_, sizeof(uint32_t));\n            header_len_ = ntohl(integer);\n            remain_packet_len_ = header_len_;\n            connStatus_ = kPacket;\n            continue;\n          }\n          return kReadHalf;\n        }\n      }\n      case kPacket: {\n        if (header_len_ > rbuf_len_ - COMMAND_HEADER_LENGTH) {  //\u89e3\u6790packet\n          uint32_t new_size = header_len_ + COMMAND_HEADER_LENGTH;\n          if (new_size < kProtoMaxMessage) {\n            rbuf_ = reinterpret_cast<char *>(realloc(rbuf_, sizeof(char) * new_size));\n            if (rbuf_ == NULL) {\n              return kFullError;\n            }\n            rbuf_len_ = new_size;\n            log_info("Thread_id %ld Expand rbuf to %u, cur_pos_ %u\\n", pthread_self(), new_size, cur_pos_);\n          } else {\n            return kFullError;\n          }\n        }\n        // read msg body\n        ssize_t nread = read(fd(), rbuf_ + cur_pos_, remain_packet_len_);\n        if (nread == -1) {\n          if (errno == EAGAIN) {\n            return kReadHalf;\n          } else {\n            return kReadError;\n          }\n        } else if (nread == 0) {\n          return kReadClose;\n        }\n        cur_pos_ += nread;\n        remain_packet_len_ -= nread;\n        if (remain_packet_len_ == 0) {\n          connStatus_ = kComplete;\n          continue;\n        }\n        return kReadHalf;\n      }\n      case kComplete: {  //\u89e3\u6790\u5b8c\u6210\u4e4b\u540e\u8c03\u7528DealMessage\u51fd\u6570\u6765\u5904\u7406\n        if (DealMessage() != 0) {\n          return kDealError;\n        }\n        connStatus_ = kHeader;\n        cur_pos_ = 0;\n        return kReadAll;\n      }\n      // Add this switch case just for delete compile warning\n      case kBuildObuf:\n        break;\n\n      case kWriteObuf:\n        break;\n    }\n  }\n\n  return kReadHalf;\n}\n\nWriteStatus PbConn::SendReply() {\n  ssize_t nwritten = 0;\n  size_t item_len;\n  slash::MutexLock l(&resp_mu_);\n  while (!write_buf_.queue_.empty()) {  //\u5199\u5165\u7684\u961f\u5217\u662f\u5426\u4e3a\u7a7a\n    std::string item = write_buf_.queue_.front();\n    item_len = item.size();\n    while (item_len - write_buf_.item_pos_ > 0) {\n      nwritten = write(fd(), item.data() + write_buf_.item_pos_, item_len - write_buf_.item_pos_);   // \u5c06\u6570\u636e\u5199\u5165\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\n      if (nwritten <= 0) {\n        break;\n      }\n      write_buf_.item_pos_ += nwritten;\n      if (write_buf_.item_pos_ == item_len) {\n        write_buf_.queue_.pop();\n        write_buf_.item_pos_ = 0;\n        item_len = 0;\n      }\n    }\n    if (nwritten == -1) {\n      if (errno == EAGAIN) {\n        return kWriteHalf;\n      } else {\n        // Here we should close the connection\n        return kWriteError;\n      }\n    }\n    if (item_len - write_buf_.item_pos_ != 0) {\n      return kWriteHalf;\n    }\n  }\n  return kWriteAll;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u4ececlient\u7684\u4e8b\u4ef6\u9a71\u52a8\u53ef\u77e5\uff0c\u5904\u7406\u7684\u4e3b\u8981\u7684\u903b\u8f91\u51fd\u6570\u5c31\u662f\u81ea\u5b9a\u4e49\u7684DealMessage()\u51fd\u6570\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u6211\u4eec\u7ee7\u7eed\u5206\u6790PikaReplClientConn\u7c7b\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u5728pika_repl_client_thread.h\u7684\u5b9a\u4e49\u4e2d\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c++",children:'class PikaReplClientThread : public pink::ClientThread {\n public:\n  PikaReplClientThread(int cron_interval, int keepalive_timeout);\n  virtual ~PikaReplClientThread() = default;\n  int Start();\n\n private:\n  class ReplClientConnFactory : public pink::ConnFactory {\n   public:\n    virtual std::shared_ptr<pink::PinkConn> NewPinkConn(\n        int connfd,\n        const std::string &ip_port,\n        pink::Thread *thread,\n        void* worker_specific_data,\n        pink::PinkEpoll* pink_epoll) const override {\n      return std::static_pointer_cast<pink::PinkConn>\n        (std::make_shared<PikaReplClientConn>(connfd, ip_port, thread, worker_specific_data, pink_epoll));  // \u65b0\u8fde\u63a5\u8fdb\u6765\u7684\u65f6\u5019\u901a\u8fc7\u521d\u59cb\u5316\u6210PikaReplClientConn\n    }\n  };\n  class ReplClientHandle : public pink::ClientHandle {\n   public:\n    void CronHandle() const override {\n    }\n    void FdTimeoutHandle(int fd, const std::string& ip_port) const override;\n    void FdClosedHandle(int fd, const std::string& ip_port) const override;\n    bool AccessHandle(std::string& ip) const override {\n      // ban 127.0.0.1 if you want to test this routine\n      // if (ip.find("127.0.0.2") != std::string::npos) {\n      //   std::cout << "AccessHandle " << ip << std::endl;\n      //   return false;\n      // }\n      return true;\n    }\n    int CreateWorkerSpecificData(void** data) const override {\n      return 0;\n    }\n    int DeleteWorkerSpecificData(void* data) const override {\n      return 0;\n    }\n    void DestConnectFailedHandle(std::string ip_port, std::string reason) const override {\n    }\n  };\n\n  ReplClientConnFactory conn_factory_;\n  ReplClientHandle handle_;\n};\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u7531\u4e8e\u6bcf\u6b21client_thread\u90fd\u4f1a\u5c06\u65b0\u8fde\u63a5\u901a\u8fc7PikaReplClientConn\u6765\u521d\u59cb\u5316\uff0c\u6545\u6bcf\u6b21\u6709\u4e8b\u4ef6\u9a71\u52a8\u7684\u65f6\u5019\u5c31\u8c03\u7528\u8be5PikaReplClientConn\u7684Dealmessage\u51fd\u6570\uff0c\u6765\u5904\u7406\u89e3\u6790\u7684\u6570\u636e\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c++",children:'int PikaReplClientConn::DealMessage() {\n  std::shared_ptr<InnerMessage::InnerResponse> response =  std::make_shared<InnerMessage::InnerResponse>();\n  ::google::protobuf::io::ArrayInputStream input(rbuf_ + cur_pos_ - header_len_, header_len_);\n  ::google::protobuf::io::CodedInputStream decoder(&input);\n  decoder.SetTotalBytesLimit(g_pika_conf->max_conn_rbuf_size(), g_pika_conf->max_conn_rbuf_size());\n  bool success = response->ParseFromCodedStream(&decoder) && decoder.ConsumedEntireMessage();  \n  if (!success) {\n    LOG(WARNING) << "ParseFromArray FAILED! " << " msg_len: " << header_len_;\n    g_pika_server->SyncError();\n    return -1;\n  }\n  switch (response->type()) {  // \u6839\u636e\u534f\u8bae\u89e3\u6790\u7684\u7c7b\u578b\u6765\u5224\u65ad\u6267\u884c\u4ec0\u4e48\u64cd\u4f5c\n    case InnerMessage::kMetaSync:\n    {\n      ReplClientTaskArg* task_arg = new ReplClientTaskArg(response, std::dynamic_pointer_cast<PikaReplClientConn>(shared_from_this()));\n      g_pika_rm->ScheduleReplClientBGTask(&PikaReplClientConn::HandleMetaSyncResponse, static_cast<void*>(task_arg));  // \u5982\u679c\u662f\u5143\u6570\u636e\u540c\u6b65\uff0c\u5c06\u8be5\u4e8b\u4ef6\u653e\u5165\u5230\u5904\u7406\u7ebf\u7a0b\u6c60\u4e2d\u6267\u884c\n      break;\n    }\n    case InnerMessage::kDBSync:\n    {\n      ReplClientTaskArg* task_arg = new ReplClientTaskArg(response, std::dynamic_pointer_cast<PikaReplClientConn>(shared_from_this()));\n      g_pika_rm->ScheduleReplClientBGTask(&PikaReplClientConn::HandleDBSyncResponse, static_cast<void*>(task_arg));\n      break;\n    }\n    case InnerMessage::kTrySync:\n    {\n      ReplClientTaskArg* task_arg = new ReplClientTaskArg(response, std::dynamic_pointer_cast<PikaReplClientConn>(shared_from_this()));\n      g_pika_rm->ScheduleReplClientBGTask(&PikaReplClientConn::HandleTrySyncResponse, static_cast<void*>(task_arg));  // \u5982\u679c\u662f\u540c\u6b65\u5219\u653e\u5165\u7ebf\u7a0b\u6c60\u4e2d\u53bb\u6267\u884cHandleTrySyncResponse\u51fd\u6570\n      break;\n    }\n    case InnerMessage::kBinlogSync:\n    {\n      DispatchBinlogRes(response);  // binlog\u540c\u6b65\u5904\u7406\n      break;\n    }\n    case InnerMessage::kRemoveSlaveNode:\n    {\n      ReplClientTaskArg* task_arg = new ReplClientTaskArg(response, std::dynamic_pointer_cast<PikaReplClientConn>(shared_from_this()));\n      g_pika_rm->ScheduleReplClientBGTask(&PikaReplClientConn::HandleRemoveSlaveNodeResponse, static_cast<void*>(task_arg));\n      break;\n    }\n    default:\n      break;\n  }\n  return 0;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u81f3\u6b64\uff0c\u4e00\u4e2apika_repl_client\u7684\u6574\u4e2a\u7684\u5904\u7406\u6d41\u7a0b\u5c31\u6e05\u6670\uff0c\u5373\u6bcf\u6b21\u90fd\u4f1a\u6839\u636e\u534f\u8bae\u8c03\u7528PikaReplClientConn\u7684DealMessage\u51fd\u6570\uff0c\u5c06\u6bcf\u4e2a\u6267\u884c\u4efb\u52a1\u653e\u5165\u7ebf\u7a0b\u6c60\u4e2d\u53bb\u5904\u7406\u3002"}),"\n",(0,r.jsx)(n.h4,{id:"pika_repl_server\u7ebf\u7a0b",children:"pika_repl_server\u7ebf\u7a0b"}),"\n",(0,r.jsx)(n.p,{children:"\u8be5\u7ebf\u7a0b\u7684\u6838\u5fc3\u601d\u60f3\u4e0epika_repl_client\u7684\u5904\u7406\u6d41\u7a0b\u5dee\u4e0d\u591a\uff0c\u53ea\u4e0d\u8fc7\u5728pink\u4e2d\u5bf9\u5e94\u7684\u662fHolyThread\uff0c\u5904\u7406\u6d41\u7a0b\u5927\u540c\u5c0f\u5f02\uff0c\u6700\u7ec8\u8c03\u7528\u7684\u5c31\u662fPikaReplServerConn\u7684DealMessage\u65b9\u6cd5\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c++",children:'int PikaReplServerConn::DealMessage() {\n  std::shared_ptr<InnerMessage::InnerRequest> req = std::make_shared<InnerMessage::InnerRequest>();\n  bool parse_res = req->ParseFromArray(rbuf_ + cur_pos_ - header_len_, header_len_);\n  if (!parse_res) {\n    LOG(WARNING) << "Pika repl server connection pb parse error.";\n    return -1;\n  }\n  switch (req->type()) {\n    case InnerMessage::kMetaSync:\n    {\n      ReplServerTaskArg* task_arg = new ReplServerTaskArg(req, std::dynamic_pointer_cast<PikaReplServerConn>(shared_from_this()));\n      g_pika_rm->ScheduleReplServerBGTask(&PikaReplServerConn::HandleMetaSyncRequest, task_arg);\n      break;\n    }\n    case InnerMessage::kTrySync:\n    {\n      ReplServerTaskArg* task_arg = new ReplServerTaskArg(req, std::dynamic_pointer_cast<PikaReplServerConn>(shared_from_this()));\n      g_pika_rm->ScheduleReplServerBGTask(&PikaReplServerConn::HandleTrySyncRequest, task_arg);\n      break;\n    }\n    case InnerMessage::kDBSync:\n    {\n      ReplServerTaskArg* task_arg = new ReplServerTaskArg(req, std::dynamic_pointer_cast<PikaReplServerConn>(shared_from_this()));\n      g_pika_rm->ScheduleReplServerBGTask(&PikaReplServerConn::HandleDBSyncRequest, task_arg);\n      break;\n    }\n    case InnerMessage::kBinlogSync:\n    {\n      ReplServerTaskArg* task_arg = new ReplServerTaskArg(req, std::dynamic_pointer_cast<PikaReplServerConn>(shared_from_this()));\n      g_pika_rm->ScheduleReplServerBGTask(&PikaReplServerConn::HandleBinlogSyncRequest, task_arg);\n      break;\n    }\n    case InnerMessage::kRemoveSlaveNode:\n    {\n      ReplServerTaskArg* task_arg = new ReplServerTaskArg(req, std::dynamic_pointer_cast<PikaReplServerConn>(shared_from_this()));\n      g_pika_rm->ScheduleReplServerBGTask(&PikaReplServerConn::HandleRemoveSlaveNodeRequest, task_arg);\n      break;\n    }\n    default:\n      break;\n  }\n  return 0;\n}\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\u4e3b\u4ece\u540c\u6b65\u7684\u6d41\u7a0b",children:"\u4e3b\u4ece\u540c\u6b65\u7684\u6d41\u7a0b"}),"\n",(0,r.jsx)(n.p,{children:"pika_repl_server\u7684\u6d41\u7a0b\u53ef\u7528\u5982\u56fe\u63cf\u8ff0\u3002"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://img-blog.csdnimg.cn/f5f65e0cb6e74b45a9afbc45933ab12f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bCP5bGL5a2Q5aSn5L6g,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center",alt:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0"})}),"\n",(0,r.jsx)(n.p,{children:"pika_repl_client\u7684\u6d41\u7a0b\u53ef\u7528\u5982\u56fe\u63cf\u8ff0\u3002"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://img-blog.csdnimg.cn/8cd2006d23814034b0b6372412506363.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bCP5bGL5a2Q5aSn5L6g,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center",alt:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0"})}),"\n",(0,r.jsx)(n.p,{children:"\u4e3b\u4ece\u7684\u72b6\u6001\u673a\u6d41\u7a0b\u5982\u4e0b\u3002"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://img-blog.csdnimg.cn/9fbd751015384d198c2ea514e4ca84b6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bCP5bGL5a2Q5aSn5L6g,size_12,color_FFFFFF,t_70,g_se,x_16#pic_center",alt:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0"})}),"\n",(0,r.jsx)(n.p,{children:"\u901a\u8fc7\u5982\u4e0a\u4e09\u4e2a\u56fe\u5c31\u53ef\u4ee5\u80fd\u591f\u660e\u767dpika\u5b98\u7f51\u63cf\u8ff0\u7684\u4e3b\u4ece\u540c\u6b65\u7684\u6d41\u7a0b\u56fe\u3002"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/OpenAtomFoundation/pika/wiki/pika-%E5%A2%9E%E9%87%8F%E5%90%8C%E6%AD%A5",children:"pika-\u589e\u91cf\u540c\u6b65"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/OpenAtomFoundation/pika/wiki/pika-%E5%85%A8%E5%90%8C%E6%AD%A5",children:"pika-\u5168\u540c\u6b65"})}),"\n",(0,r.jsx)(n.h2,{id:"\u603b\u7ed3",children:"\u603b\u7ed3"}),"\n",(0,r.jsx)(n.p,{children:"\u672c\u6587\u6839\u636epika\u5b98\u7f51\u7684\u6d41\u7a0b\uff0c\u5206\u6790\u4e86\u4e00\u4e0bpika\u4e3b\u4ece\u7684\u4e00\u4e2a\u5927\u81f4\u6d41\u7a0b\uff0c\u5176\u4e2d\u8fd8\u5305\u542b\u4e86\u5f88\u591a\u7684\u6280\u672f\u7ec6\u8282\u9650\u4e8e\u672c\u6587\u7bc7\u5e45\u5e76\u6ca1\u6709\u8be6\u5c3d\u5206\u6790\uff0c\u4e3b\u8981\u901a\u8fc7\u539f\u7406\u6d41\u7a0b\u7684\u4e00\u4e2a\u5206\u6790\u6765\u67e5\u770b\u4e86\u4e3b\u4ece\u540c\u6b65\u7684\u72b6\u6001\u673a\u7ebf\u7a0b\uff0c\u548c\u4e3b\u4ece\u540c\u6b65\u7684\u7ebf\u7a0b\u6a21\u578b\u7684\u57fa\u672c\u539f\u7406\u3002\u7531\u4e8e\u672c\u4eba\u624d\u758f\u5b66\u6d45\uff0c\u5982\u6709\u9519\u8bef\u8bf7\u6279\u8bc4\u6307\u6b63\u3002"})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(6540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);